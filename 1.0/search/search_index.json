{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Automated Penetration Testing Reporting System","text":"<p>APTRS (Automated Penetration Testing Reporting System) is a Python, Django and ViteJS-based automated reporting tool designed for penetration testers and security organizations. This tool streamlines the report generation process by enabling users to create PDF, Docx and Excel reports directly, eliminating the need for manual approaches. Additionally, APTRS offers a systematic way to monitor and manage vulnerabilities within various projects. Keep your penetration testing projects organized and efficient with APTRS.</p>"},{"location":"API/","title":"API Documentation","text":"<ul> <li>Postman APIs</li> <li>Postman API Collection</li> <li>Swagger</li> </ul>"},{"location":"Features/","title":"Index","text":"<p>APTRS offers various features and configurations, including the management of companies, customers, projects, retests, different types of reports, configurations, templates, and more. The Features Documentation provides detailed information on the different setups, features, and use cases.</p>"},{"location":"Features/Users/users/","title":"User Management in APTRS","text":"<p>APTRS provides robust user management capabilities, allowing you to add, edit, and delete users. Each user can log in to the APTRS platform using their credentials, and they have the option to set a profile photo through the Edit Profile feature. In version 1.0, users are also able to change their passwords.</p> <p></p>"},{"location":"Features/Users/users/#user-types","title":"User Types","text":"<p>There are two types of users in APTRS:</p> <ol> <li>Admin Users: Admin users have elevated permissions and can perform administrative tasks, including managing user accounts and configurations.</li> <li>Non-Admin Users: Non-admin users have restricted access and can perform tasks based on the permissions and groups assigned to them.</li> </ol> <p>All users can log in and perform tasks according to their assigned permissions and groups. </p> <p>Info</p> <p>For detailed information on permissions and groups, please refer to the Permissions and Groups section.</p>"},{"location":"Features/Users/users/#user-classification","title":"User Classification","text":"<p>Users are classified into two categories:</p> <ol> <li>Internal Users (Staff Users): By default, all users added to the system are marked as staff users, indicating they are internal users of the APTRS.</li> <li>External Users (Non-Staff Users): External users are designated as non-staff users. For details on managing non-staff users, please refer to the Customer section.</li> </ol> <p>This structured approach to user management ensures that you can effectively manage access levels and user capabilities within the APTRS platform.</p>"},{"location":"Features/Users/users/#important-note-on-deleting-users","title":"Important Note on Deleting Users","text":"<p>All projects in APTRS must have an owner. Deleting a user will cause errors, as projects assigned to that user will no longer have an owner. If you need to disable a user\u2019s account, it is recommended to set the account to \"inactive\" rather than deleting it. If you choose to delete the user, be aware that you will need to manually reassign ownership of all the projects associated with that user to avoid issues.</p>"},{"location":"Features/company/company/","title":"Company Management in APTRS","text":"<p>APTRS allows you to add and manage companies, with two types of companies supported: Internal Companies and External (Non-Internal) Companies.</p> <p></p>"},{"location":"Features/company/company/#internal-companies","title":"Internal Companies","text":"<p>APTRS assumes that your company, the one deploying and using APTRS, is the internal company. When you deploy APTRS for the first time, an internal company is automatically created. This company is assigned to you and cannot be deleted or replaced. However, you can rename it to reflect your actual company name.</p> <p>Key details about internal companies:</p> <ul> <li>Internal Company Setup: The internal company is auto-created during the initial setup, and no additional internal companies can be added afterward.</li> <li>User Assignment: All users added through the User Management page will automatically be part of the internal company.</li> <li>Reports: Users and data from the internal company will be reflected in your reports as staff or internal users.</li> </ul>"},{"location":"Features/company/company/#external-non-internal-companies","title":"External (Non-Internal) Companies","text":"<p>All companies manually added after the initial setup are classified as External Companies. These are typically client companies or third-party organizations.</p> <p>Key details about external companies:</p> <ul> <li>User Management: You cannot add users to external companies through the User Management page. Any user added through this page will be assigned as a staff member of the internal company.</li> <li>Assigning Users to External Companies: To assign users to external companies, you need to go through the Customer section, which manages external users.</li> <li>Projects: You can create projects for both internal and external companies, allowing you to track and manage work for client companies separately from your own.</li> </ul> <p>This setup ensures a clear distinction between your internal users and external client companies, making it easier to manage access, projects, and reports within APTRS.</p> <p>Warning</p> <p>Deleting a company will also delete all associated users. Make sure to reassign or handle any users before deleting a company.</p>"},{"location":"Features/company/customer/","title":"Customer Management in APTRS","text":"<p>Customers in APTRS are external users who belong to external (non-internal) companies. You can manage these users from the Customer page, where external users are added and tracked, and they are included in reports as customer users.</p> <p></p>"},{"location":"Features/company/customer/#adding-customers","title":"Adding Customers","text":"<p>When adding a customer, you will need to provide the following information:</p> <ul> <li>Email: The customer's email address.</li> <li>Company: The external company they belong to.</li> <li>Password: A password is required as part of the future functionality.</li> </ul> <p>Though passwords are required during customer creation, as of version 1.0, external users do not yet have access to login, API, or dashboard features. These features are planned for future releases, where customers will be able to log into the APTRS dashboard, view ongoing and past projects, download reports, and more.</p> <p>This allows APTRS to lay the groundwork for future functionality while managing customer data and ensuring they are accurately represented in reports.</p>"},{"location":"Features/configuration/configuration/","title":"Configuration","text":"<p>The Configuration section allows admin users or users with the Manage Configurations permission to add and manage various settings. In APTRS, users can define Project Types, such as \"Mobile Application Testing,\" which are used when creating projects and are also referenced in PDF and DOCX reports. Multiple project types can be added to suit different testing needs.</p> <p>In addition to project types, users can also create Report Standards. When generating a report, users are required to select the applicable testing standard, such as OWASP for web application testing. Users can add additional standards here, which can then be used in the generated reports.</p> <p></p>"},{"location":"Features/dashboard/dashboard/","title":"Dashboard","text":"<p>The Dashboard provides a personalized view of projects based on the logged-in user\u2019s ownership and project status. Unlike the Projects View Page, which lists all projects within APTRS, the Dashboard only displays projects where the logged-in user is the owner and the project is not marked as completed. The Dashboard shows projects with the following statuses: Delay, In Progress, or Upcoming, as long as the user is the owner of those projects.</p> <p>In addition to active or upcoming projects, the Dashboard also displays completed projects if the project has an active retest. Even if a project is marked as completed, it will be shown in the Dashboard if it has any upcoming, in-progress, or delayed retests where the logged-in user is the owner of the retest task.</p> <p>This also applies in cases where the user is the owner of the retest task for a completed project, even if the user is not the owner of the original project. In such cases, the project will still appear on the Dashboard, allowing the user to view and manage their active retest tasks.</p> <p></p>"},{"location":"Features/permission/permission/","title":"Groups and Permissions in APTRS","text":"<p>APTRS uses permissions to control access to certain APIs and restrict features to specific users. To streamline this process, APTRS allows you to create groups and assign permissions to those groups. Once a group is created, you can assign users to one or more groups. A user assigned to multiple groups will inherit all the permissions from those groups.</p> <p></p>"},{"location":"Features/permission/permission/#how-permissions-work","title":"How Permissions Work","text":"<p>Permissions are pre-defined within APTRS to regulate access to various functionalities. These permissions cannot be modified or created from the user interface, as they are hard-coded in the backend. However, you can create custom groups and assign these predefined permissions to the groups. When users are assigned to a group, they will automatically gain all the permissions associated with that group.</p>"},{"location":"Features/permission/permission/#admin-users-and-permissions","title":"Admin Users and Permissions","text":"<p>Admin users in APTRS are not restricted by permissions or group assignments. This means that even if an admin user has no group assigned or is assigned to a group with limited permissions, they will still have full access to all features and APIs in the system. Admin users are always granted full control, regardless of group membership or assigned permissions.</p>"},{"location":"Features/permission/permission/#default-groups","title":"Default Groups","text":"<p>When you first deploy APTRS, several default groups are created with specific permissions. The most important groups are Project Manager and Manager. These groups are crucial for report generation, as they are used to add project manager and manager details to reports.</p> <p>While you can edit the permissions assigned to these groups, it is important to retain the group names (\"Project Manager\" and \"Manager\") if you want APTRS to correctly include project manager and manager details in the reports. Removing or renaming these groups may cause issues with report generation and prevent the correct user details from being added to reports.</p>"},{"location":"Features/permission/permission/#list-of-permissions-as-of-version-10","title":"List of Permissions (as of version 1.0)","text":"<ul> <li> <p>Manage Users: Users with this permission can add, edit, and delete users, manage groups, and assign permissions to groups. They can also create and delete groups.</p> </li> <li> <p>Manage Projects: Users with this permission can create, edit, and delete projects. They can add vulnerabilities or retests within a project, generate reports, and add scope to projects. By default, users cannot select project or retest owners; projects and retests created by users with this permission will automatically mark the creator as the owner.</p> </li> <li> <p>Assign Projects: This permission allows users to select and assign project or retest owners. Users with this permission can assign any user as the owner of a project or retest.</p> </li> <li> <p>Manage Vulnerability Data: Users with this permission can add, edit, and delete entries in the vulnerability database or templates.</p> </li> <li> <p>Manage Customers: Users with this permission can add, edit, and delete customers.</p> </li> <li> <p>Manage Companies: Users with this permission can add, edit, and delete companies.</p> </li> <li> <p>Manage Configurations: Users with this permission can manage various application configurations.</p> </li> </ul>"},{"location":"Features/project/Vulnerability/","title":"Project Vulnerability","text":"<p>Each project can have associated vulnerabilities. You can navigate to the Vulnerability tab within a project to manage its vulnerabilities. This tab allows you to add, edit, or remove vulnerabilities specific to that project, providing a dedicated space to document identified security issues, their descriptions, solutions, CVSS scores, and other relevant details.</p> <p>Using the Vulnerability Database, you can quickly import common vulnerabilities with pre-filled information, saving time when adding recurring or well-documented issues across multiple projects.</p> <p></p>"},{"location":"Features/project/Vulnerability/#adding-vulnerabilities","title":"Adding Vulnerabilities","text":"<p>APTRS provides multiple ways to add vulnerabilities to a project, offering flexibility in how you manage and document security issues.</p> <ul> <li> <p>Search and Add: This feature allows you to search for vulnerabilities by title or name from the Vulnerability DB or Template. Once you select a vulnerability from the search results, a new entry is created within the project, automatically populated with the title, description, solution, reference link, and CVSS score from the Vulnerability DB. This approach allows for efficient reuse of information with pre-filled details, saving time on repetitive entries.</p> </li> <li> <p>Add New: Selecting \"Add New\" will create a blank vulnerability entry within the project. All fields are initially empty except for the title, which is set to \"New Vulnerability.\" This option is ideal if you need to manually document unique vulnerabilities not in the database. You can fill in all required details such as description, solution, and severity.</p> </li> <li> <p>Upload CSV: This option is designed specifically for importing vulnerabilities from Nessus scan outputs. You can upload a Nessus vulnerability scan CSV report, which APTRS will parse to extract details such as URL or IP, port, title, description, and more. Parsed vulnerabilities are then added directly to the project, saving time on data entry for larger assessments.</p> </li> </ul>"},{"location":"Features/project/Vulnerability/#nessus-csv","title":"Nessus CSV","text":"<p>This feature can also be used for other, non-Nessus scan reports. As long as the CSV file contains the required columns with matching names, APTRS will process it just like a Nessus report, making it a versatile option for importing vulnerabilities from various sources.</p>"},{"location":"Features/project/Vulnerability/#required-csv-columns","title":"Required CSV Columns","text":"<p>To ensure that vulnerabilities are parsed correctly, your CSV file should include the following columns:</p> <ul> <li>Host: The IP address or URL of the affected system.</li> <li>Port: The network port where the vulnerability was found.</li> <li>Name: The title of the vulnerability, providing a brief identifier.</li> <li>Description: A detailed explanation of the vulnerability, including its nature and potential impact.</li> <li>Solution: Recommended actions or patches to mitigate or resolve the vulnerability.</li> <li>Risk: The severity level of the vulnerability (e.g., Info, Low, Medium, High, Critical). APTRS uses this to assign a default CVSS score and vector.</li> </ul>"},{"location":"Features/project/Vulnerability/#cvss-score-and-vector","title":"CVSS Score and Vector","text":"<p>As of version 1.0, APTRS does not accept CVSS scores and vectors from CSV imports because default Nessus reports do not include them. Instead, APTRS assigns a default CVSS score and vector based on the Risk level provided in the CSV file.</p>"},{"location":"Features/project/Vulnerability/#default-cvss-scores-and-vectors-cvss-31","title":"Default CVSS Scores and Vectors (CVSS 3.1)","text":"<p>These default values are automatically assigned based on the risk level when the CSV is parsed:</p> Severity Base Score Vector <code>Critical</code> 9.8 CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H <code>High</code> 7.6 CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:L <code>Medium</code> 5.5 CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L <code>Low</code> 3.5 CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N <code>Informational</code> 0.0 CVSS:3.1/AV:A/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:N <p>These defaults ensure consistency in reporting for imported vulnerabilities, even if specific CVSS details aren\u2019t included in the CSV file.</p>"},{"location":"Features/project/Vulnerability/#vulnerability-instances","title":"Vulnerability Instances","text":"<p>Each vulnerability in a project is required to have an instance. An instance represents the specific URL, parameter, IP address, and port number of the affected vulnerability. Each instance within a vulnerability can have its own status, allowing for more granular tracking and resolution.</p> <p></p>"},{"location":"Features/project/Vulnerability/#vulnerability-and-instance-status","title":"Vulnerability and Instance Status","text":"<p>The status of each vulnerability and its instances is tracked individually to provide clear insights into the resolution progress. Below are the details on how the status is managed and calculated for both vulnerabilities and their instances.</p> <p>The status of a vulnerability and its instances are interconnected. There are three possible statuses for both vulnerabilities and instances:</p> <ul> <li>Vulnerable: The vulnerability or instance has unresolved security issues.</li> <li>Confirmed Fix: The vulnerability or instance has been resolved and no longer has security issues.</li> <li>Accepted Risk: The vulnerability or instance remains unresolved, but the customer or client has accepted the associated risk.</li> </ul> <p>These statuses function as follows:</p> <ol> <li> <p>Changing Vulnerability Status: If you change the status of a vulnerability, all instances associated with that vulnerability will automatically be set to the same status. For example, setting a vulnerability to Accepted Risk will update all instances within that vulnerability to Accepted Risk as well.</p> </li> <li> <p>Changing Instance Status: When modifying the status of individual instances within a vulnerability, the overall vulnerability status is recalculated based on its instances' statuses. The rules are as follows:</p> <ul> <li>Confirmed Fix: For a vulnerability to be marked as Confirmed Fix, all instances must be set to Confirmed Fix. Even a single instance with a different status prevents the vulnerability from being marked as Confirmed Fix.</li> <li>Vulnerable: If any instance is marked as Vulnerable, the entire vulnerability is marked as Vulnerable, regardless of other instances\u2019 statuses.</li> <li>Accepted Risk: If all instances are marked as Accepted Risk, the vulnerability status will also be set to Accepted Risk.</li> </ul> </li> </ol> <p>In short, for a vulnerability to be considered Confirmed Fix, all instances must be Confirmed Fix. To be marked as Accepted Risk, all instances must have that status. Any instance marked as Vulnerable will cause the vulnerability itself to be marked as Vulnerable.</p>"},{"location":"Features/project/project-view/","title":"Project View","text":"<p>APTRS allows users to create and manage projects, which are typically created when conducting a pentest for a company. When setting up a project, you can associate it with a specific company, select multiple internal users as project owners, and define key details such as project type, start and end dates, and a brief description.</p> <p>Once the project is created, you can later add vulnerabilities, generate reports, and track progress within the project. This feature helps organize pentesting efforts efficiently, ensuring clear project ownership and structure.</p> <p></p>"},{"location":"Features/project/project-view/#project-status","title":"Project Status","text":"<p>The project status is automatically calculated based on the project\u2019s start and end dates:</p> <ul> <li>Upcoming: If the start date is in the future.</li> <li>In Progress: If the start date has passed or is today, but the end date is still in the future.</li> <li>Delayed: If the end date has passed.</li> <li>Completed: If the project is marked as completed.</li> </ul> <p>If your project is completed, you can manually mark it as Completed from the project summary. To do this, navigate to the project from the project table or dashboard, and you\u2019ll find an option to mark it as completed on the project summary page.</p>"},{"location":"Features/project/project-view/#project-details","title":"Project Details","text":"<p>Once a project is created, it is not possible to change the associated company. However, you can still edit other details, such as project type, dates, description, and owners.</p>"},{"location":"Features/project/project-view/#project-owners","title":"Project Owners","text":"<p>In Version 1.0, APTRS supports assigning multiple project owners, allowing you to add as many project owners as needed. Assigning or selecting a project owner requires admin privileges or the Assign Projects permission. Otherwise, the user creating the project is automatically added as the project owner.</p>"},{"location":"Features/project/report/","title":"Project Report","text":"<p>Once your project is ready, you can generate a report for the identified vulnerabilities. APTRS version 1.0 provides options to generate reports in PDF, Excel, and DOCX formats. Navigate to the report section within the project, select the desired report type and standard, and download the report directly.</p> <p></p> <p>As of version 1.0, the DOCX report generation feature is experimental. It may be removed or enhanced with more customization options in future versions. Once validated for full customization and consistent presentation, this feature will become permanent.</p>"},{"location":"Features/project/report/#report-customization","title":"Report Customization","text":"<p>You can customize both the PDF and DOCX reports:</p> <ul> <li>PDF Reports: APTRS uses the WeasyPrint Python library to convert HTML into PDF. You can modify the HTML and CSS files used in report generation to match your requirements. </li> <li>DOCX Reports: APTRS leverages the <code>python-docxtpl</code> library to create DOCX files. The CKEditor WYSIWYG editor is used for entering vulnerability and project details. CKEditor\u2019s HTML output is then converted into DOCX format using the <code>html2docx</code> library, and integrated with <code>docxtpl</code> to generate the final report.</li> </ul> <p>The HTML and DOCX report templates are available here: - HTML and DOCX Report Templates</p> <p>CSS files for HTML-to-PDF reports can be customized here: - CSS for PDF Reports</p>"},{"location":"Features/project/report/#report-limitations","title":"Report Limitations","text":"<ul> <li>PDF Reports: APTRS uses the <code>WeasyPrint</code> Python library to generate PDF reports. However, <code>WeasyPrint</code> does not support JavaScript execution, which limits the ability to include custom, interactive charts directly within the PDF. Instead, APTRS generates charts using a Python library and embeds them as static images in the PDF. This approach restricts customization of charts via HTML and CSS.</li> <li>DOCX Reports: APTRS generates DOCX reports using a combination of <code>python-docx</code>, <code>python-docxtpl</code>, and <code>html2docx</code>. While <code>python-docxtpl</code> enables dynamic content insertion into documents, it does not support updating or dynamically modifying charts. As a result, charts included in DOCX reports cannot be automatically updated with dynamic values by APTRS.</li> </ul>"},{"location":"Features/project/retest/","title":"Project Retest","text":"<p>Each project can have a retest task created and assigned to a user. Similar to a project, each retest includes a start and end date and has a designated retest owner. Retests allow you to specify the revalidation of the project\u2019s vulnerabilities, ensuring that fixes have been applied as expected. Within a project, users can initiate a retest to start this process.</p> <p></p> <p>Similar to project ownership, the retest owner is automatically set to the user creating the retest if they do not have admin privileges or the Assign Projects permission. Users with admin access or Assign Projects permission can select the retest owner. Once a retest task is created, it cannot be edited, though you can still delete the retest task if needed.</p>"},{"location":"Features/project/retest/#validation","title":"Validation","text":"<ul> <li>Project Completion Requirement: A retest task cannot be created if the project is not marked as completed. Retests are only applicable to projects that have been fully executed, as retests aim to validate resolved vulnerabilities. Therefore, a project must be completed before any retest can be initiated.</li> <li>Single Active Retest Restriction: Even if the project is completed, you cannot create a new retest task if there is an existing retest task that is not marked as completed. Only one active retest can be associated with a project at a time.</li> </ul>"},{"location":"Features/project/scope/","title":"Project Scope","text":"<p>Each project includes scopes, allowing you to define the list of IPs, URLs, or application names that are part of the engagement. Starting from version 1.0, each project can have multiple scopes. Within the project page, you can navigate to the Scope section to manage the specific scope of the project.</p> <p></p>"},{"location":"Features/vulnerabilityDB/vulnerability/","title":"Vulnerability DB (or Template)","text":"<p>The Vulnerability DB or Template feature in APTRS allows you to add and manage a database of vulnerabilities that can be reused across different projects. When adding a vulnerability to a project, you can specify all necessary details such as the title, description, solution, CVSS score, and more.</p> <p>If you encounter the same vulnerability in multiple projects, such as IDOR or SQL Injection, the Vulnerability DB allows you to save time by reusing the same information without needing to write it again for each project. This helps streamline reporting and ensures consistency across projects.</p> <p>By creating templates for common vulnerabilities, you can easily import them when adding vulnerabilities to new projects, reducing redundant work and improving efficiency.</p> <p></p>"},{"location":"custom-report/docx/company-user/","title":"Context Variables for Company and Users","text":""},{"location":"custom-report/docx/company-user/#1-internal-company-name","title":"1. Internal Company Name","text":"<ul> <li> <p>Description: </p> <p>This variable will provide the name of the internal company (your own company) that is linked to the APTRS. It fetches the company name from the <code>Company</code> model where the <code>internal</code> field is set to <code>True</code>.</p> </li> <li> <p>Usage Example:</p> Python<pre><code>Company Who DID the Pentest: {{ mycompany }}\n</code></pre> </li> </ul>"},{"location":"custom-report/docx/company-user/#2-project-manager-users","title":"2. Project Manager Users","text":"<ul> <li> <p>Description:</p> <p>This variable gives access to all the internal users who are part of the \"Project Manager\" group. You can loop through this list to display details like the name of the project managers working on the project.</p> </li> <li> <p>Usage Example:</p> Python<pre><code>Project Managers:\n\n        {% for user in projectmanagers %}\n            {{ user.full_name }}  {{ user.position }} {{ user.email }}\n        {% endfor %}\n</code></pre> </li> </ul>"},{"location":"custom-report/docx/company-user/#3-customer-company-users","title":"3. Customer Company Users","text":"<ul> <li> <p>Description:</p> <p>This variable provides access to the users who belong to the customer\u2019s company for the project. It retrieves the list of active users associated with the project\u2019s customer company.</p> </li> <li> <p>Usage Example:</p> Text Only<pre><code>    Customer Users:\n\n        {% for user in customeruser %}\n            {{ user.full_name }} {{ user.position }} {{ user.email }}\n        {% endfor %}\n</code></pre> </li> </ul>"},{"location":"custom-report/docx/docx/","title":"Docx","text":"<p>APTRS provides the ability to generate detailed DOCX reports using customizable templates. You can use Jinja2 template tags within your <code>.docx</code> templates to dynamically populate project and vulnerability data. This guide explains how to customize your template and use available context variables.</p>"},{"location":"custom-report/docx/docx/#template-location","title":"Template Location","text":"<p>The default template is located at: <code>/APTRS/templates/report.docx</code></p> <p>You can replace this file with your custom <code>.docx</code> template while keeping the required placeholders intact.</p>"},{"location":"custom-report/docx/docx/#using-template-tags","title":"Using Template Tags","text":"<p>The <code>.docx</code> template uses Jinja2 syntax for placeholders and loops. Below are some examples:</p>"},{"location":"custom-report/docx/docx/#placeholders","title":"Placeholders","text":"<ul> <li>Syntax: <code>{{ variable_name }}</code></li> <li>Example: To display the project name, use: <code>{{ project.name }}</code></li> </ul>"},{"location":"custom-report/docx/docx/#loops","title":"Loops","text":"<ul> <li>Syntax: <code>{% for item in items %}...{% endfor %}</code></li> <li>Example: To list all vulnerabilities:</li> </ul> Python<pre><code>{% for vulnerability in vulnerabilities %}\n\n{{ vulnerability.vulnerabilityname }} (CVSS: {{ vulnerability.cvssscore }}) {% endfor %}\n</code></pre>"},{"location":"custom-report/docx/docx/#conditional-statements","title":"Conditional Statements","text":"<ul> <li>Syntax: <code>{% if condition %}...{% else %}...{% endif %}</code></li> <li>Example: To check if a project has vulnerabilities:</li> </ul> Python<pre><code>{% if vulnerabilities %} \nVulnerabilities are present. \n{% else %} \nNo vulnerabilities found. \n{% endif %}\n</code></pre>"},{"location":"custom-report/docx/docx/#available-context-variables","title":"Available Context Variables","text":"Variable Description <code>project</code> The project object for which the report is being generated. Contains all project details. <code>owners</code> User details of All Project Owners <code>project_exception</code> Project Exceptions <code>project_description</code> Project Description <code>vulnerabilities</code> Queryset of vulnerabilities for the project, ordered by CVSS score (higher to lower). <code>mycomany</code> The name of the internal (your company) company. <code>projectmanagers</code> Queryset of users in the \"Project Manager\" group. <code>customeruser</code> Queryset of customer users associated with the project's customer company. <code>projectscope</code> Queryset of all project scopes for the project. <code>totalretest</code> List of retest schedules and owners. <code>totalvulnerability</code> Total count of vulnerabilities for the project. <code>Report_type</code> The type of report being generated (e.g., Audit, Re-Audit). <code>standard</code> The standard or methodology being used for the report. <code>currentdate</code> Get Current Date if needed in the report <code>page_break</code> Allows you to add page break in the docx report such as page break after each vulnerability details <code>new_line</code> Allows you to add a new line if needed"},{"location":"custom-report/docx/docx/#docx-formatting-with-jinja2","title":"Docx Formatting with Jinja2","text":"<p>By default, Jinja2 adds blank lines with conditions or loops, which can be problematic for Docx formatting. Unlike HTML, where empty lines have minimal impact, in Docx, this can lead to extra rows in tables or increased table width.</p> <p>APTRS uses the docxtpl library, based on Python-docx and Jinja2, for template-based rendering. To reduce blank lines, you can use Jinja2's whitespace control.</p> <p>However, this method doesn't always work flawlessly; it may inadvertently remove important elements like tables along with extra spaces. A simpler solution can involve using a single line of code.</p> <p>You can modify the code like this:</p> Python<pre><code>##Instead of new line for code\n{% if vulnerabilities %} \nVulnerabilities are present. \n{% else %} \nNo vulnerabilities found. \n{% endif %}\n\n\n## you can change it to like this on a single line \n\n{% if vulnerabilities %} Vulnerabilities are present. {% else %} No vulnerabilities found. {% endif %}\n</code></pre>"},{"location":"custom-report/docx/docx/#color-and-conditions","title":"Color and Conditions","text":"<p>Each severity level in the report is represented by different colors: low or informational is often green or light blue, while high severity is red. Status can also be color-coded, with fixed vulnerabilities in green and open ones in red or orange.</p> <p>In HTML reports, you can add severity values to the tag's class attribute and create CSS to apply the colors.</p> <p>For DOCX reports, colors cannot be applied to undefined elements, limiting customization. To assign colors based on severity\u2014like red for critical and orange for high\u2014include them directly in the conditional statements within your DOCX template.</p> Python<pre><code>{% if severity == 'Critical' %} severity with red color. {% elif severity == 'Low' %} severity with green color. {% endif %}\n</code></pre> <p></p> <p>Note</p> <p>Adding Jinja2 White Space control to this will remove the color.</p> <p>What if instead of just color for the text, we want to add color for the cell in the table like below  </p> Name Status Severity SQL Injection Vulnerable Confirm Fixed <p>We can do that as well with cellbg in the table, with hex color code like below:</p> Python<pre><code>{% cellbg 'FF491C' if vulnerability.vulnerabilityseverity== 'Critical' else 'F66E09' if vulnerability.vulnerabilityseverity== 'High' else 'FBBC02' if vulnerability.vulnerabilityseverity== 'Medium' else '20B803' if vulnerability.vulnerabilityseverity== 'Low' else '3399FF' %}{{ vulnerability.vulnerabilityseverity}}\n</code></pre> <p></p>"},{"location":"custom-report/docx/other/","title":"Context Variables for Vulnerabilities and Report Data","text":""},{"location":"custom-report/docx/other/#1-total-vulnerabilities","title":"1. Total Vulnerabilities","text":"<ul> <li>Description:   Provides the total count of vulnerabilities associated with a project.</li> <li>Usage Example:   You can display the total number of vulnerabilities for the project.</li> </ul> Python<pre><code>Total Vulnerabilities: {{ totalvulnerability }}\n</code></pre>"},{"location":"custom-report/docx/other/#2-report-type","title":"2. Report Type","text":"<ul> <li>Description:   Specifies the type of report being generated. This can include types like \"Audit\" or \"Re-Audit\".</li> <li>Usage Example:   Show the type of the report (Audit or Re-Audit).</li> </ul> Python<pre><code>  Report Type: {{ Report_type }}\n</code></pre>"},{"location":"custom-report/docx/other/#3-report-standard","title":"3. Report Standard","text":"<ul> <li>Description:   The standard or methodology being used for generating the report (e.g., OWASP, NIST). It will be in the list format, you can use below example to get in a text separated by comma.</li> <li>Usage Example:   Display the methodology or standard used in the vulnerability report.</li> </ul> Python<pre><code>  Report Standard: {{ standard|join(', ') }} \n</code></pre>"},{"location":"custom-report/docx/other/#4-current-date","title":"4. Current Date","text":"<ul> <li> <p>Description:   Get the current date if needed in the report.</p> </li> <li> <p>Usage Example: Python<pre><code>Report Generated On: {{ currentdate }}   \n# OR\n{{ currentdate.strftime('%B %d, %Y') }}\n</code></pre></p> </li> </ul>"},{"location":"custom-report/docx/other/#5-page-break","title":"5.  Page Break","text":"<ul> <li> <p>Description:    Allows you to add a page break in the DOCX report, such as after each vulnerability's details.</p> </li> <li> <p>Usage Example: Python<pre><code>  {% if vulnerability %}\n  {{ page_break }}\n  {% endif %}\n</code></pre></p> </li> </ul>"},{"location":"custom-report/docx/other/#6-new-line","title":"6. New Line","text":"<ul> <li> <p>Description:    Allows you to add a new line if needed in the report.</p> </li> <li> <p>Usage Example: Python<pre><code>  Vulnerability Details:  \n  CVSS Score{{ new_line }} 8.8\n</code></pre></p> </li> </ul>"},{"location":"custom-report/docx/project/","title":"Project","text":""},{"location":"custom-report/docx/project/#project-model-variables-for-template-customization","title":"Project Model Variables for Template Customization","text":"<p>The <code>Project</code> model in APTRS contains the following fields that can be used as template variables in your custom report templates. These variables are passed as part of the context to the report Docx, allowing you to display or manipulate project-related data in your custom reports.</p>"},{"location":"custom-report/docx/project/#available-variables-and-their-usage","title":"Available Variables and Their Usage","text":"<ol> <li> <p><code>project.name</code> </p> <ul> <li>Represents the name of the project.  </li> <li>Example usage in HTML: Python<pre><code>Project Name: {{ project.name }}\n</code></pre></li> </ul> </li> <li> <p><code>project.companyname</code> </p> <ul> <li>A foreign key to the <code>Company</code> model, representing the company associated (Customer Company) with the project.  </li> <li>Example usage: Python<pre><code>Company Name: {{ project.companyname.name }}\n</code></pre></li> </ul> </li> <li> <p><code>project_exception</code> </p> <ul> <li>A detailed description of the project.  </li> <li>Example usage: Python<pre><code>Description: {{p project_exception}}\n</code></pre></li> <li>It uses CKeditor HTML data, its converted into the docx format from HTML, hence its required to use <code>p</code> at the start of the tag.</li> </ul> </li> <li> <p><code>project.projecttype</code> </p> <ul> <li>Specifies the type of project.  </li> <li>Example usage: Python<pre><code>Project Type: {{ project.projecttype }}\n</code></pre></li> </ul> </li> <li> <p><code>project.startdate</code> </p> <ul> <li>The start date of the project.  </li> <li>Example usage: Python<pre><code>Start Date: {{ project.startdate }}\n</code></pre></li> <li>You can also modify the date format      Python<pre><code>    Project Start Date: {{ project.startdate.strftime(\"%d/%m/%Y\") }}\n</code></pre></li> </ul> </li> <li> <p><code>project.enddate</code> </p> <ul> <li>The end date of the project.  </li> <li>Example usage: Python<pre><code>&lt;End Date: {{ project.enddate }}\n</code></pre></li> <li>You can also modify the date format      Python<pre><code>    Project End Date: {{project.enddate.strftime(\"%d/%m/%Y\") }}\n</code></pre></li> </ul> </li> <li> <p><code>project.testingtype</code> </p> <ul> <li>The type of testing performed for the project (e.g., White Box, Black Box).  </li> <li>Example usage: Python<pre><code>Testing Type: {{ project.testingtype }}\n</code></pre></li> </ul> </li> <li> <p><code>project_exception</code> </p> <ul> <li>Notes or exceptions for the project, if any.  </li> <li>Example usage: Python<pre><code>Exceptions: {{p project_exception }}\n</code></pre></li> <li>It uses CKeditor HTML data, its converted into the docx format from HTML, hence its required to use <code>p</code> at the start of the tag.</li> <li>In most cases if you don't have exceptions and in your report you only this if exception is there you are also do it with conditions.   Python<pre><code>{% if project_exception %}\nExceptions: {{p project_exception }}\n{% endif %}\n</code></pre></li> </ul> </li> <li> <p><code>project.owner</code> </p> <ul> <li>Note: This is not available, due to issues with the method provided by django to loop many to many database relation, it does not work with the jinja2. </li> </ul> </li> <li> <p><code>project.status</code> </p> <ul> <li>The current status of the project, based on <code>PROJECT_STATUS_CHOICES</code> (e.g., Upcoming, In Progress, Delay, Completed).  </li> <li>Example usage: Python<pre><code>Status: {{ project.status }}\n</code></pre></li> </ul> </li> </ol> <p>In order to get Project owner details, APTRS provide a seperate context and tag <code>owners</code> which contain user details for project owners. In order to use it you have to loop through details like below:</p> Python<pre><code>      {% for owner in owners %}\n        {{ owner.full_name}}\n        {{ owner.email}}\n        {{ owner.position}}\n        {{ owner.number}}\n      {% endfor %}\n</code></pre>"},{"location":"custom-report/docx/retest/","title":"Context Variable for Project Retests","text":"<p>The <code>totalretest</code> variable gives access to the retests associated with a project. It allows you to display details of a project retest, including start and end dates, owners, and status. </p> <ul> <li>Usage Example:   You can loop through <code>totalretest</code> to display the retests for a project. However, it is possible to conditionally display the retests based on the <code>Report_type</code>, e.g., showing retests only when the report type is \"Re-Audit\".</li> </ul> Python<pre><code>  Project Retests:\n\n      {% for retest in totalretest %}\n          {{ retest.startdate }}  {{ retest.enddate }} | Status: {{ retest.status }}\n\n                  {% for owner in retest.owners %}\n                      {{ owner }}\n                  {% endfor %}\n\n      {% endfor %}\n</code></pre> <p>Note</p> <p>The <code>{{ owner }}</code> will only show the full_name of the owner, as of now its limited to full name only.</p> <p>It is possible to conditionally display the retests based on the <code>Report_type</code>, e.g., showing retests only when the report type is \"Re-Audit\".</p> HTML<pre><code>{% if Report_type == 'Re-Audit' %}\n  Project Retests:\n\n      {% for retest in totalretest %}\n          {{ retest.startdate }} - {{ retest.enddate }} | Status: {{ retest.status }}\n\n                {% for owner in retest.owners %}\n                      {{ owner }}\n                  {% endfor %}\n\n      {% endfor %}\n\n{% endif %}\n</code></pre>"},{"location":"custom-report/docx/scope/","title":"Context Variable for Project Scope","text":"<p>The <code>projectscope</code> variable gives access to the scope of a project. It allows you to retrieve and display details of the project's scope, including any specific tasks, requirements, or exceptions related to the project. You can loop through this context variable to show the scope items associated with a project.</p> <ul> <li>Usage Example:</li> </ul> Python<pre><code>Project Scope:\n\n    {% for scope in projectscope %}\n        {{ scope.scope }}  {{ scope.description }}\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre>"},{"location":"custom-report/docx/vulnerability/","title":"Vulnerability","text":""},{"location":"custom-report/docx/vulnerability/#vulnerability-and-instance-model-variables-for-template-customization","title":"Vulnerability and Instance Model Variables for Template Customization","text":"<p>In APTRS, the <code>Vulnerability</code> and <code>Vulnerableinstance</code> models are used to manage and track vulnerabilities and their instances across various projects. APTRS provide <code>{{vulnerabilities}}</code> tag with list of all vulnerabilities and its instances. Below is an overview of the variables available for use in templates when working with these models.</p>"},{"location":"custom-report/docx/vulnerability/#available-variables-for-vulnerability-model","title":"Available Variables for Vulnerability Model","text":"<ol> <li> <p><code>vulnerability.vulnerabilityname</code> </p> <ul> <li>The name of the vulnerability (e.g., \"SQL Injection\").  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nVulnerability Name: {{ vulnerability.vulnerabilityname }}\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.vulnerabilityseverity</code> </p> <ul> <li>The severity of the vulnerability (e.g., \"High\", \"Medium\").  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nSeverity: {{ vulnerability.vulnerabilityseverity }}\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.cvssscore</code> </p> <ul> <li>The CVSS score associated with the vulnerability.  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nCVSS Score: {{ vulnerability.cvssscore }}\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.cvssvector</code> </p> <ul> <li>The CVSS vector associated with the vulnerability.  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nCVSS Vector: {{ vulnerability.cvssvector }}\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.status</code> </p> <ul> <li>The status of the vulnerability, based on <code>STATUS_CHOICES</code> (e.g., Vulnerable, Confirm Fixed, Accepted Risk).  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nStatus: {{ vulnerability.status }}\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.vulnerabilitydescription</code> </p> <ul> <li>A description of the vulnerability.  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nDescription: {{p vulnerability.vulnerabilitydescription }}\n{% endfor %}\n</code></pre></li> <li>It uses CKeditor HTML data, its converted into the docx format from HTML, hence its required to use <code>p</code> at the start of the tag.</li> </ul> </li> <li> <p><code>vulnerability.POC</code> </p> <ul> <li>The proof of concept (POC) for the vulnerability.  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nPOC: {{p vulnerability.POC }}\n{% endfor %}\n</code></pre></li> <li>It uses CKeditor HTML data, its converted into the docx format from HTML, hence its required to use <code>p</code> at the start of the tag.</li> </ul> </li> <li> <p><code>vulnerability.vulnerabilitysolution</code> </p> <ul> <li>The recommended solution for the vulnerability.  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nSolution: {{p vulnerability.vulnerabilitysolution }}\n{% endfor %}\n</code></pre></li> <li>It uses CKeditor HTML data, its converted into the docx format from HTML, hence its required to use <code>p</code> at the start of the tag.</li> </ul> </li> <li> <p><code>vulnerability.vulnerabilityreferlnk</code> </p> <ul> <li>A reference link related to the vulnerability.  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nReference Link: {{p vulnerability.vulnerabilityreferlnk }}\n{% endfor %}\n</code></pre></li> <li>It uses CKeditor HTML data, its converted into the docx format from HTML, hence its required to use <code>p</code> at the start of the tag.</li> </ul> </li> <li> <p><code>vulnerability.created</code> </p> <ul> <li>The timestamp when the vulnerability was created.  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nCreated: {{ vulnerability.created }}\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.created_by</code> </p> <ul> <li>The user who created the vulnerability.  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nCreated By: {{ vulnerability.created_by.username }}\n{{ vulnerability.created_by.full_name }}\n{% endfor %}\n</code></pre></li> <li>Similar to project owner, you can use other filed as well  like email, number or postion etc.</li> </ul> </li> <li> <p><code>vulnerability.last_updated_by</code> </p> <ul> <li>The user who last updated the vulnerability.  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\nLast Updated By: {{ vulnerability.last_updated_by.username }}\n{{ vulnerability.last_updated_by.full_name }}\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.instances_data</code> </p> <ul> <li>Acess all instaces of the vulnerability.  </li> <li>Example usage: Python<pre><code>{% for vulnerability in vulnerabilities %}\n\n      {for instance in vulnerability.instances_data %}\n      ## This give all instances for vulnerabiltiy in current loop\n\n        URL: {{ instance.URL }}\n        Parameter: {{ instance.Parameter }}\n        Parameter: {{ instance.Status }}\n\n      {% endfor %}\n\n{% endfor %}\n</code></pre></li> </ul> </li> </ol>"},{"location":"custom-report/docx/vulnerability/#example","title":"Example","text":"Python<pre><code>{% for vulnerability in vulnerabilities %}\n\n    Vulnerability Name: {{ vulnerability.vulnerabilityname }}\n\n    Severity: {{ vulnerability.vulnerabilityseverity }}\n\n    CVSS Score: {{ vulnerability.cvssscore }}\n\n    CVSS Vector: {{ vulnerability.cvssvector }}\n\n    Status: {{ vulnerability.status }}\n\n    Description:  \n    {{p vulnerability.vulnerabilitydescription }}\n\n    POC:  \n    {{p vulnerability.POC }}\n\n    Solution:  \n    {{p vulnerability.vulnerabilitysolution }}\n\n    Reference Link:  \n    {{p vulnerability.vulnerabilityreferlnk }}\n\n    Created On: {{ vulnerability.created }}\n\n    Created By:  \n    - Username: {{ vulnerability.created_by.username }}  \n    - Full Name: {{ vulnerability.created_by.full_name }}\n    - Email: {{ vulnerability.created_by.email }}\n    - Number: {{ vulnerability.created_by.number }}\n\n    Last Updated By:  \n    - Username: {{ vulnerability.last_updated_by.username }}\n    - Full Name: {{ vulnerability.last_updated_by.full_name }}\n    - Email: {{ vulnerability.last_updated_by.email }}\n    - Number: {{ vulnerability.last_updated_by.number }}\n\n    Instances\n\n      {for instance in vulnerability.instances_data %}\n\n        URL: {{ instance.URL }}\n        Parameter: {{ instance.Parameter }}\n        Parameter: {{ instance.Status }}\n\n      {% endfor %}\n\n{% endfor %}\n</code></pre>"},{"location":"custom-report/docx/vulnerability/#reference","title":"Reference","text":"<p>For reference you can see <code>vulnerabilities</code> tag as below json object</p> JSON<pre><code>vulnerabilities = [\n    {\n        \"project\": \"Project Name or ID\",  \n        \"vulnerabilityname\": \"SQL Injection in Login Page\",\n        \"vulnerabilityseverity\": \"High\",\n        \"cvssscore\": 9.8,\n        \"cvssvector\": \"AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\",\n        \"status\": \"Vulnerable\",\n        \"vulnerabilitydescription\": \"Converted DOCX content for vulnerability 1 description\",\n        \"POC\": \"Converted DOCX content for vulnerability 1 proof of concept\",\n        \"created\": \"2024-11-20T10:15:30Z\",\n        \"vulnerabilitysolution\": \"Converted DOCX content for vulnerability 1 solution\",\n        \"vulnerabilityreferlnk\": \"Converted DOCX content for vulnerability 1 reference link\",\n        \"created_by\": \"User1\",\n        \"last_updated_by\": \"User2\",\n        \"instances_data\": [\n            {\n                \"URL\": \"https://example.com/vulnerable-endpoint-1\",\n                \"Parameter\": \"user_id\",\n                \"Status\": \"Open\"\n            },\n            {\n                \"URL\": \"https://example.com/another-endpoint-1\",\n                \"Parameter\": \"\",\n                \"Status\": \"Closed\"\n            }\n        ]\n    },\n    {\n        \"project\": \"Project Name or ID\",  \n        \"vulnerabilityname\": \"Cross-Site Scripting in Search Page\",\n        \"vulnerabilityseverity\": \"Medium\",\n        \"cvssscore\": 6.5,\n        \"cvssvector\": \"AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N\",\n        \"status\": \"Vulnerable\",\n        \"vulnerabilitydescription\": \"Converted DOCX content for vulnerability 2 description\",\n        \"POC\": \"Converted DOCX content for vulnerability 2 proof of concept\",\n        \"created\": \"2024-11-19T14:10:45Z\",\n        \"vulnerabilitysolution\": \"Converted DOCX content for vulnerability 2 solution\",\n        \"vulnerabilityreferlnk\": \"Converted DOCX content for vulnerability 2 reference link\",\n        \"created_by\": \"User3\",\n        \"last_updated_by\": \"User4\",\n        \"instances_data\": [\n            {\n                \"URL\": \"https://example.com/vulnerable-endpoint-2\",\n                \"Parameter\": \"session_id\",\n                \"Status\": \"Open\"\n            },\n            {\n                \"URL\": \"https://example.com/another-endpoint-2\",\n                \"Parameter\": \"order_id\",\n                \"Status\": \"Closed\"\n            }\n        ]\n    }\n]\n</code></pre>"},{"location":"custom-report/pdf/company-user/","title":"Context Variables for Company and Users","text":""},{"location":"custom-report/pdf/company-user/#1-internal-company-name","title":"1. Internal Company Name","text":"<ul> <li> <p>Description: </p> <p>This variable will provide the name of the internal company (your own company) that is linked to the APTRS. It fetches the company name from the <code>Company</code> model where the <code>internal</code> field is set to <code>True</code>.</p> </li> <li> <p>Usage Example:</p> HTML<pre><code>&lt;p&gt;Company: {{ mycompany }}&lt;/p&gt;\n</code></pre> </li> </ul>"},{"location":"custom-report/pdf/company-user/#2-project-manager-users","title":"2. Project Manager Users","text":"<ul> <li> <p>Description:</p> <p>This variable gives access to all the internal users who are part of the \"Project Manager\" group. You can loop through this list to display details like the name of the project managers working on the project.</p> </li> <li> <p>Usage Example:</p> HTML<pre><code>&lt;h3&gt;Project Managers:&lt;/h3&gt;\n    &lt;ul&gt;\n        {% for user in projectmanagers %}\n            &lt;li&gt;{{ user.full_name }} - {{ user.position }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n</code></pre> </li> </ul>"},{"location":"custom-report/pdf/company-user/#3-customer-company-users","title":"3. Customer Company Users","text":"<ul> <li> <p>Description:</p> <p>This variable provides access to the users who belong to the customer\u2019s company for the project. It retrieves the list of active users associated with the project\u2019s customer company.</p> </li> <li> <p>Usage Example:</p> HTML<pre><code>    &lt;h3&gt;Customer Users:&lt;/h3&gt;\n    &lt;ul&gt;\n        {% for user in customeruser %}\n            &lt;li&gt;{{ user.full_name }} - {{ user.position }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n</code></pre> </li> </ul>"},{"location":"custom-report/pdf/context-variable/","title":"Context Variable","text":"<p>This document describes how to customize the HTML templates used to generate PDF reports using the <code>GetHTML</code> function in your Django application. Below are the available context variables that can be used in the HTML templates and their respective details.</p>"},{"location":"custom-report/pdf/context-variable/#context-variables","title":"Context Variables","text":"<p>The following context variables are passed to the HTML template (<code>report.html</code>) during PDF generation. Users can use these variables to dynamically customize the content of the PDF report.</p> Variable Name Description <code>project</code> The project object for which the report is being generated. Contains all project details. <code>vuln</code> Queryset of vulnerabilities for the project, ordered by CVSS score (higher to lower). <code>instances</code> Queryset of all vulnerable instances associated with the project. <code>projectmanagers</code> Queryset of users in the \"Project Manager\" group. <code>customeruser</code> Queryset of customer users associated with the project's customer company. <code>mycomany</code> The name of the internal (your company) company. <code>projectscope</code> Queryset of all project scopes for the project. <code>totalretest</code> Queryset of all retests for the project. <code>totalvulnerability</code> Total count of vulnerabilities for the project. <code>ciritcal</code> Count of vulnerabilities with severity \"Critical\". <code>high</code> Count of vulnerabilities with severity \"High\". <code>medium</code> Count of vulnerabilities with severity \"Medium\". <code>low</code> Count of vulnerabilities with severity \"Low\". <code>info</code> Count of vulnerabilities with severity \"Informational\" or \"None\". <code>standard</code> The standard or methodology being used for the report. <code>Report_type</code> The type of report being generated (e.g., Audit, Re-Audit). <code>pie_chart</code> Rendered pie chart data showing the vulnerability distribution by severity."},{"location":"custom-report/pdf/context-variable/#how-to-customize-templates","title":"How to Customize Templates","text":"<ol> <li> <p>Locate the HTML Template: </p> <ul> <li>The report template is located at <code>templates/*</code>. You can modify this file or create a new one for different report types.</li> </ul> </li> <li> <p>Use Context Variables: </p> <ul> <li>Insert the context variables into the template using Django's template syntax. For example:     HTML<pre><code>&lt;h1&gt;Vulnerability Report for {{ project.name }}&lt;/h1&gt;\n&lt;p&gt;Total Vulnerabilities: {{ totalvulnerability }}&lt;/p&gt;\n&lt;p&gt;Critical Issues: {{ ciritcal }}&lt;/p&gt;\n&lt;p&gt;High Severity Issues: {{ high }}&lt;/p&gt;\n</code></pre></li> </ul> </li> <li> <p>Dynamic Content:</p> <ul> <li>Use loops and conditionals to dynamically render data. For example:     HTML<pre><code>&lt;ul&gt;\n{% for vuln in vuln %}\n    &lt;li&gt;{{ vuln.vulnerabilityname }} - Severity: {{ vuln.vulnerabilityseverity }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre></li> </ul> </li> <li> <p>Styling and Charts:</p> <ul> <li>Use <code>{{ pie_chart|safe }}</code> to embed the rendered pie chart in the HTML. Ensure that the <code>safe</code> filter is applied to include raw HTML safely.</li> </ul> </li> </ol>"},{"location":"custom-report/pdf/context-variable/#example-template-usage","title":"Example Template Usage","text":"<p>Here\u2019s a sample section of the <code>report.html</code> template:</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{{ project.name }} Vulnerability Report&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{{ mycomany }} - Vulnerability Report&lt;/h1&gt;\n    &lt;h2&gt;Project: {{ project.name }}&lt;/h2&gt;\n    &lt;p&gt;Total Vulnerabilities: {{ totalvulnerability }}&lt;/p&gt;\n    &lt;p&gt;Critical Issues: {{ ciritcal }}&lt;/p&gt;\n    &lt;p&gt;High Severity Issues: {{ high }}&lt;/p&gt;\n    &lt;p&gt;Medium Severity Issues: {{ medium }}&lt;/p&gt;\n    &lt;p&gt;Low Severity Issues: {{ low }}&lt;/p&gt;\n    &lt;p&gt;Informational Issues: {{ info }}&lt;/p&gt;\n\n    &lt;h3&gt;Vulnerability Breakdown&lt;/h3&gt;\n    {{ pie_chart|safe }}\n\n    &lt;h3&gt;Vulnerabilities&lt;/h3&gt;\n    &lt;ul&gt;\n        {% for v in vuln %}\n            &lt;li&gt;{{ v.vulnerabilityname }} - Severity: {{ v.vulnerabilityseverity }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"custom-report/pdf/other/","title":"Context Variables for Vulnerabilities and Report Data","text":""},{"location":"custom-report/pdf/other/#1-total-vulnerabilities","title":"1. Total Vulnerabilities","text":"<ul> <li>Description:   Provides the total count of vulnerabilities associated with a project.</li> <li>Usage Example:   You can display the total number of vulnerabilities for the project.</li> </ul> HTML<pre><code>&lt;p&gt;Total Vulnerabilities: {{ totalvulnerability }}&lt;/p&gt;\n</code></pre>"},{"location":"custom-report/pdf/other/#2-severity-count","title":"2. Severity Count","text":"<ul> <li>Description:   Shows the count of vulnerabilities that have a severity of Critical or High, Medium, Low, None.</li> <li>Usage Example:   You can display the severity count.</li> </ul> HTML<pre><code>  &lt;p&gt;Critical Vulnerabilities: {{ critical }}&lt;/p&gt;\n  &lt;p&gt;High Vulnerabilities: {{ high }}&lt;/p&gt;\n  &lt;p&gt;Medium Vulnerabilities: {{ medium }}&lt;/p&gt;\n  &lt;p&gt;Low Vulnerabilities: {{ low }}&lt;/p&gt;\n  &lt;p&gt;Informational Vulnerabilities: {{ info }}&lt;/p&gt;\n</code></pre>"},{"location":"custom-report/pdf/other/#3-report-standard","title":"3. Report Standard","text":"<ul> <li>Description:   The standard or methodology being used for generating the report (e.g., OWASP, NIST). It will be in the list format, you can use below example to get in a text separated by comma.</li> <li>Usage Example:   Display the methodology or standard used in the vulnerability report.</li> </ul> HTML<pre><code>  &lt;p&gt;Report Standard: {{ standard|join:\", \" }}&lt;/p&gt;\n</code></pre>"},{"location":"custom-report/pdf/other/#4-report-type","title":"4. Report Type","text":"<ul> <li>Description:   Specifies the type of report being generated. This can include types like \"Audit\" or \"Re-Audit\".</li> <li>Usage Example:   Show the type of the report (Audit or Re-Audit).</li> </ul> HTML<pre><code>  &lt;p&gt;Report Type: {{ Report_type }}&lt;/p&gt;\n</code></pre>"},{"location":"custom-report/pdf/other/#5-chart-image","title":"5. Chart Image","text":"<ul> <li>Description:   This variable holds the rendered data for a pie chart showing the distribution of vulnerabilities by severity.</li> <li>Usage Example:   Use this to display a pie chart visualizing vulnerability severity distribution.</li> </ul> HTML<pre><code>  &lt;div&gt;{{ pie_chart|safe }}&lt;/div&gt;\n</code></pre>"},{"location":"custom-report/pdf/pdf/","title":"Customized PDF Report Documentation","text":"<p>APTRS uses the WeasyPrint library to generate PDF reports from HTML and CSS. The Django template engine dynamically passes data to the HTML template using context variables. </p>"},{"location":"custom-report/pdf/pdf/#how-it-works","title":"How It Works","text":"<p>The system is designed so you don\u2019t need to edit the Django code that handles report generation unless you are familiar with Django and Python. The recommended approach is to customize the layout and styling by modifying the HTML and CSS files provided with the project.</p>"},{"location":"custom-report/pdf/pdf/#file-structure-for-customization","title":"File Structure for Customization","text":"<p>Within the project root directory, there is a subdirectory named <code>APTRS</code>. This contains the following important folders for report customization:</p> <ol> <li> <p>Static Folder:  </p> <ul> <li>Located inside the <code>APTRS</code> directory.  </li> <li>Contains a <code>CSS</code> subfolder where all CSS files for the report are stored.  </li> <li>Includes predefined styles that you can customize to adjust the appearance of the report.</li> </ul> </li> <li> <p>Templates Folder:  </p> <ul> <li>Located in the same directory as the <code>static</code> folder.  </li> <li>Contains all the HTML templates used for generating reports.  </li> <li>Templates are modular, with the main report layout in <code>report.html</code> and additional reusable components loaded using Django's <code>{% include %}</code> tag.</li> </ul> </li> </ol>"},{"location":"custom-report/pdf/pdf/#key-files-for-customization","title":"Key Files for Customization","text":"<ol> <li> <p><code>report.html</code>:</p> <ul> <li>The main HTML file for the report.  </li> <li>Includes the overall structure, head tags, and references to CSS files.  </li> <li>Dynamically includes other HTML components for better modularity.</li> </ul> </li> <li> <p><code>report-page.css</code>:</p> <ul> <li>The primary CSS file applied to all report pages.  </li> <li>Handles global styles such as font loading, page numbering, table styles, and default styles for HTML tags.  </li> <li>Defines general formatting applied across the entire report.</li> </ul> </li> <li> <p>Component Files:</p> <ul> <li>Each HTML file has a corresponding CSS file for specific styles.</li> <li>For example, styles specific to an HTML section like <code>vulnerability.html</code> will be defined in <code>vulnerability.css</code>.</li> <li>This structure ensures easy identification and modification of styles tied to specific sections.</li> </ul> </li> </ol>"},{"location":"custom-report/pdf/pdf/#fonts","title":"Fonts","text":"<p>The project uses the Fira Sans font by default, stored in the <code>static/fonts</code> folder. You can:</p> <ul> <li>Add new fonts to the <code>fonts</code> folder.</li> <li>Update the CSS in the <code>report-page.css</code> file to use your fonts.</li> </ul>"},{"location":"custom-report/pdf/pdf/#customization-tips","title":"Customization Tips","text":"<ul> <li>Modify HTML files to change content layout, add new sections, or reorder components.</li> <li>Edit CSS files to change colors, fonts, or styles for specific sections.</li> <li>Use the modular structure to quickly locate and modify styles for individual components.</li> <li>For global styles or formatting (e.g., page numbers, headers, footers), update <code>report-page.css</code>.</li> </ul>"},{"location":"custom-report/pdf/pdf/#important-notes","title":"Important Notes","text":"<ul> <li>Avoid editing the Django code unless necessary, as it handles the logic for passing variables and generating the PDF.</li> <li>All changes to the static files (CSS) or templates (HTML) will reflect in the next report generated.</li> </ul>"},{"location":"custom-report/pdf/project/","title":"Project","text":""},{"location":"custom-report/pdf/project/#project-model-variables-for-template-customization","title":"Project Model Variables for Template Customization","text":"<p>The <code>Project</code> model in APTRS contains the following fields that can be used as template variables in your custom report templates. These variables are passed as part of the context to the report HTML, allowing you to display or manipulate project-related data in your custom reports.</p>"},{"location":"custom-report/pdf/project/#available-variables-and-their-usage","title":"Available Variables and Their Usage","text":"<ol> <li> <p><code>project.name</code> </p> <ul> <li>Represents the name of the project.  </li> <li>Example usage in HTML: HTML<pre><code>&lt;h1&gt;Project Name: {{ project.name }}&lt;/h1&gt;\n</code></pre></li> </ul> </li> <li> <p><code>project.companyname</code> </p> <ul> <li>A foreign key to the <code>Company</code> model, representing the company associated (Customer Company) with the project.  </li> <li>Example usage: HTML<pre><code>&lt;p&gt;Company Name: {{ project.companyname.name }}&lt;/p&gt;\n</code></pre></li> </ul> </li> <li> <p><code>project.description</code> </p> <ul> <li>A detailed description of the project.  </li> <li>Example usage: HTML<pre><code>&lt;p&gt;Description: {{project.description|clean_html}}&lt;/p&gt;\n</code></pre></li> <li>It uses CKeditor HTML data, using <code>|clean_html</code> allow to render html data securely instead of as text.</li> </ul> </li> <li> <p><code>project.projecttype</code> </p> <ul> <li>Specifies the type of project.  </li> <li>Example usage: HTML<pre><code>&lt;p&gt;Project Type: {{ project.projecttype }}&lt;/p&gt;\n</code></pre></li> </ul> </li> <li> <p><code>project.startdate</code> </p> <ul> <li>The start date of the project.  </li> <li>Example usage: HTML<pre><code>&lt;p&gt;Start Date: {{ project.startdate }}&lt;/p&gt;\n</code></pre></li> <li>You can also modify the date format      HTML<pre><code>    &lt;p&gt;Start Date: {{project.startdate|date:\"d/m/Y\" }} &lt;/p&gt;\n</code></pre></li> </ul> </li> <li> <p><code>project.enddate</code> </p> <ul> <li>The end date of the project.  </li> <li>Example usage: HTML<pre><code>&lt;p&gt;End Date: {{ project.enddate }}&lt;/p&gt;\n</code></pre></li> <li>You can also modify the date format      HTML<pre><code>    &lt;p&gt;End Date: {{project.enddate|date:\"d/m/Y\" }} &lt;/p&gt;\n</code></pre></li> </ul> </li> <li> <p><code>project.testingtype</code> </p> <ul> <li>The type of testing performed for the project (e.g., White Box, Black Box).  </li> <li>Example usage: HTML<pre><code>&lt;p&gt;Testing Type: {{ project.testingtype }}&lt;/p&gt;\n</code></pre></li> </ul> </li> <li> <p><code>project.projectexception</code> </p> <ul> <li>Notes or exceptions for the project, if any.  </li> <li>Example usage: HTML<pre><code>&lt;p&gt;Exceptions: {{ project.projectexception|clean_html }}&lt;/p&gt;\n</code></pre></li> <li>It uses CKeditor HTML data, using <code>|clean_html</code> allow to render html data securely instead of as text.</li> <li>In most cases if you don't have exceptions and in your report you only this if exception is there you are also do it with conditions.   HTML<pre><code>{% if project.projectexception %}\n&lt;p&gt;Exceptions: {{ project.projectexception|clean_html }}&lt;/p&gt;\n{% endif %}\n</code></pre></li> </ul> </li> <li> <p><code>project.owner</code> </p> <ul> <li>A many-to-many relationship representing users associated as owners of the project.  </li> <li>To display all owners: HTML<pre><code>&lt;ul&gt;\n  {% for owner in project.owner.all %}\n    &lt;li&gt;{{ owner.username }}&lt;/li&gt;\n    &lt;li&gt;{{ owner.full_name }} &lt;/li&gt;\n    &lt;td&gt;{{ owner.email }} &lt;/li&gt;\n    &lt;li&gt;{{ owner.number }} &lt;/li&gt;\n    &lt;li&gt;{{ owner.position }} &lt;/li&gt;\n  {% endfor %}\n&lt;/ul&gt;\n</code></pre></li> </ul> </li> <li> <p><code>project.status</code> </p> <ul> <li>The current status of the project, based on <code>PROJECT_STATUS_CHOICES</code> (e.g., Upcoming, In Progress, Delay, Completed).  </li> <li>Example usage: HTML<pre><code>&lt;p&gt;Status: {{ project.status }}&lt;/p&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"custom-report/pdf/retest/","title":"Context Variable for Project Retests","text":"<p>The <code>totalretest</code> variable gives access to the retests associated with a project. It allows you to display details of a project retest, including start and end dates, owners, and status. </p> <ul> <li>Usage Example:   You can loop through <code>totalretest</code> to display the retests for a project. However, it is possible to conditionally display the retests based on the <code>Report_type</code>, e.g., showing retests only when the report type is \"Re-Audit\".</li> </ul> HTML<pre><code>&lt;h3&gt;Project Retests:&lt;/h3&gt;\n  &lt;ul&gt;\n      {% for retest in totalretest %}\n          &lt;li&gt;{{ retest.startdate }} - {{ retest.enddate }} | Status: {{ retest.status }}\n\n              {% for owner in retest.owner.all %}\n                    {{ owner.full_name }}\n\n              {% endfor %}\n          &lt;/li&gt;\n      {% endfor %}\n  &lt;/ul&gt;\n</code></pre> <p>It is possible to conditionally display the retests based on the <code>Report_type</code>, e.g., showing retests only when the report type is \"Re-Audit\".</p> HTML<pre><code>{% if Report_type == 'Re-Audit' %}\n  &lt;h3&gt;Project Retests:&lt;/h3&gt;\n  &lt;ul&gt;\n      {% for retest in totalretest %}\n          &lt;li&gt;{{ retest.startdate }} - {{ retest.enddate }} | Status: {{ retest.status }}\n\n            {% for owner in retest.owner.all %}\n                    {{ owner.full_name }}\n\n              {% endfor %}\n          &lt;/li&gt;\n      {% endfor %}\n  &lt;/ul&gt;\n{% endif %}\n</code></pre>"},{"location":"custom-report/pdf/scope/","title":"Context Variable for Project Scope","text":"<p>The <code>projectscope</code> variable gives access to the scope of a project. It allows you to retrieve and display details of the project's scope, including any specific tasks, requirements, or exceptions related to the project. You can loop through this context variable to show the scope items associated with a project.</p> <ul> <li>Usage Example:</li> </ul> HTML<pre><code>&lt;h3&gt;Project Scope:&lt;/h3&gt;\n&lt;ul&gt;\n    {% for scope in projectscope %}\n        &lt;li&gt;{{ scope.scope }} - {{ scope.description }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre>"},{"location":"custom-report/pdf/vulnerability/","title":"Vulnerability","text":""},{"location":"custom-report/pdf/vulnerability/#vulnerability-and-instance-model-variables-for-template-customization","title":"Vulnerability and Instance Model Variables for Template Customization","text":"<p>In APTRS, the <code>Vulnerability</code> and <code>Vulnerableinstance</code> models are used to manage and track vulnerabilities and their instances across various projects. Below is an overview of the variables available for use in templates when working with these models.</p>"},{"location":"custom-report/pdf/vulnerability/#available-variables-for-vulnerability-model","title":"Available Variables for Vulnerability Model","text":"<ol> <li> <p><code>vulnerability.vulnerabilityname</code> </p> <ul> <li>The name of the vulnerability (e.g., \"SQL Injection\").  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;Vulnerability Name: {{ vulnerability.vulnerabilityname }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.vulnerabilityseverity</code> </p> <ul> <li>The severity of the vulnerability (e.g., \"High\", \"Medium\").  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;Severity: {{ vulnerability.vulnerabilityseverity }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.cvssscore</code> </p> <ul> <li>The CVSS score associated with the vulnerability.  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;CVSS Score: {{ vulnerability.cvssscore }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.cvssvector</code> </p> <ul> <li>The CVSS vector associated with the vulnerability.  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;CVSS Vector: {{ vulnerability.cvssvector }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.status</code> </p> <ul> <li>The status of the vulnerability, based on <code>STATUS_CHOICES</code> (e.g., Vulnerable, Confirm Fixed, Accepted Risk).  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;Status: {{ vulnerability.status }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.vulnerabilitydescription</code> </p> <ul> <li>A description of the vulnerability.  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;Description: {{ vulnerability.vulnerabilitydescription|clean_html }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.POC</code> </p> <ul> <li>The proof of concept (POC) for the vulnerability.  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;POC: {{ vulnerability.POC|clean_html }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.vulnerabilitysolution</code> </p> <ul> <li>The recommended solution for the vulnerability.  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;Solution: {{ vulnerability.vulnerabilitysolution|clean_html }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.vulnerabilityreferlnk</code> </p> <ul> <li>A reference link related to the vulnerability.  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;Reference Link: {{ vulnerability.vulnerabilityreferlnk|clean_html }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.created</code> </p> <ul> <li>The timestamp when the vulnerability was created.  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;Created: {{ vulnerability.created }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> <li> <p><code>vulnerability.created_by</code> </p> <ul> <li>The user who created the vulnerability.  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;Created By: {{ vulnerability.created_by.username }}&lt;/p&gt;\n{{ vulnerability.created_by.full_name }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> <li>Similar to project owner, you can use other filed as well  like email, number or postion etc.</li> </ul> </li> <li> <p><code>vulnerability.last_updated_by</code> </p> <ul> <li>The user who last updated the vulnerability.  </li> <li>Example usage: HTML<pre><code>{% for vulnerability in vuln %}\n&lt;p&gt;Last Updated By: {{ vulnerability.last_updated_by.username }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ul> </li> </ol>"},{"location":"custom-report/pdf/vulnerability/#available-variables-for-vulnerableinstance-model","title":"Available Variables for Vulnerableinstance Model","text":"<ol> <li><code>instance.vulnerabilityid</code> </li> <li>The <code>Vulnerability</code> object associated with the instance.  </li> <li> <p>Example usage: HTML<pre><code>{% for instance in instances %}\n&lt;p&gt;Vulnerability Name: {{ instance.vulnerabilityid.vulnerabilityname }}&lt;/p&gt;\n{% endfor %}\n</code></pre></p> </li> <li> <p><code>instance.project</code> </p> </li> <li>The project associated with the vulnerable instance.  </li> <li> <p>Example usage: HTML<pre><code>{% for instance in instances %}\n&lt;p&gt;Project: {{ instance.project.name }}&lt;/p&gt;\n{% endfor %}\n</code></pre></p> </li> <li> <p><code>instance.URL</code> </p> </li> <li>The URL of the vulnerable instance.  </li> <li> <p>Example usage: HTML<pre><code>{% for instance in instances %}\n&lt;p&gt;URL: {{ instance.URL }}&lt;/p&gt;\n{% endfor %}\n</code></pre></p> </li> <li> <p><code>instance.Parameter</code> </p> </li> <li>The parameter of the vulnerable instance.  </li> <li> <p>Example usage: HTML<pre><code>{% for instance in instances %}\n&lt;p&gt;Parameter: {{ instance.Parameter }}&lt;/p&gt;\n{% endfor %}\n</code></pre></p> </li> <li> <p><code>instance.status</code> </p> </li> <li>The status of the vulnerable instance, based on <code>STATUS_CHOICES</code> (e.g., Vulnerable, Confirm Fixed, Accepted Risk).  </li> <li>Example usage: HTML<pre><code>{% for instance in instances %}\n&lt;p&gt;Status: {{ instance.status }}&lt;/p&gt;\n{% endfor %}\n</code></pre></li> </ol>"},{"location":"custom-report/pdf/vulnerability/#displaying-vulnerable-instances-for-a-specific-vulnerability-in-a-template","title":"Displaying Vulnerable Instances for a Specific Vulnerability in a Template","text":"<p>The instances query set or list does not associate with the vulnerability name, instances variable contain all instances for the project, In most cases we need all instances for a vulnerability. We can do that as well, you can check in the original <code>vulnerabilities.html</code> in the template or you can use this: </p> <p>To display the instances for a specific vulnerability within a loop for vulnerabilities, you can use the following approach:</p> HTML<pre><code>{% for vulnerability in vuln %}\n\n &lt;p&gt;Vulnerability Name: {{ vulnerability.vulnerabilityname }}&lt;/p&gt;\n\n&lt;p&gt;{{ vulnerability.vulnerabilitysolution|clean_html }}&lt;/p&gt;\n\n&lt;p&gt;{{ vulnerability.vulnerabilityreferlnk|clean_html }}&lt;/p&gt;\n\n&lt;p&gt;POC: {{ vulnerability.POC|clean_html }}&lt;/p&gt;\n\n  &lt;p&gt;Description: {{ vulnerability.vulnerabilitydescription|clean_html }}&lt;/p&gt;\n\n   &lt;p&gt;Status: {{ vulnerability.status }}&lt;/p&gt;\n\n   &lt;p&gt;CVSS Vector: {{ vulnerability.cvssvector }}&lt;/p&gt;\n\n   &lt;p&gt;Severity: {{ vulnerability.vulnerabilityseverity }}&lt;/p&gt;\n\n  {% for instance in instances %}\n\n    {% if instance.vulnerabilityid.id == vulnerability.id %}\n      &lt;tr&gt;\n        &lt;td&gt;{{ instance.URL }}&lt;/td&gt;\n        &lt;td&gt;{{ instance.Parameter }}&lt;/td&gt;\n        &lt;td&gt;{{ instance.status }}&lt;/td&gt;\n      &lt;/tr&gt;\n    {% endif %}\n\n  {% endfor %}\n\n{% endfor %}\n</code></pre>"},{"location":"getting-started/Contribution/","title":"Project Contribution","text":""},{"location":"getting-started/Contribution/#project-contribution","title":"Project Contribution","text":""},{"location":"getting-started/Contribution/#creator","title":"Creator","text":"<ul> <li>Sourav Kalal</li> </ul>"},{"location":"getting-started/Contribution/#special-thanks","title":"Special Thanks","text":"<ul> <li> <p>DJ Scruggs A big thanks to DJ Scruggs for creating the entire ViteJS frontend from scratch and implementing the APIs for version 1.0.</p> <ul> <li>GitHub</li> <li>Portfolio</li> <li>LinkedIn</li> </ul> </li> </ul>"},{"location":"getting-started/Contribution/#mention","title":"Mention","text":"<p>Yonathan johnson Started creating the frontend using React. Although he could not complete the development due to certain circumstances, his initiative and effort are greatly appreciated.</p>"},{"location":"getting-started/Features/","title":"Features","text":""},{"location":"getting-started/Features/#features","title":"Features","text":"<ul> <li> <p>Automated Report Generation: APTRS automates creating comprehensive penetration testing reports, saving time and ensuring consistency.</p> </li> <li> <p>PDF Docx, and Excel Reports: Generate professional-looking PDF, Docx and Excel reports with ease, providing clients and stakeholders with clear insights into security assessments.</p> </li> <li> <p>Vulnerability Management: APTRS helps you keep track of vulnerabilities across different projects, allowing for efficient management and mitigation.</p> </li> <li> <p>User-Friendly Interface: The tool is designed with a user-friendly interface, making it accessible for both novice and experienced penetration testers.</p> </li> <li> <p>Customization: Tailor your reports to meet specific project requirements, ensuring that the generated reports align with your organization's standards.</p> </li> <li> <p>Project and Customer Management: Manage all your projects, retest, and customer all in one place. The user and project tracking allows you to monitor the user's project allocation, plans, and status.</p> </li> </ul>"},{"location":"getting-started/Sponsors/","title":"Sponsors","text":"<ul> <li>Many thanks to DigitalOcean for their generous support of the project.</li> </ul>"},{"location":"getting-started/demo/","title":"Demo","text":""},{"location":"getting-started/demo/#live-demo-instance","title":"Live Demo Instance","text":"<p>Explore the features of APTRS through our live demo instance:</p> <ul> <li>Live Demo</li> <li>Username: sourav.kalal@aptrs.com</li> <li>Password: I-am-Weak-Password-Please-Change-Me</li> </ul> <p>Feel free to interact with the tool and see how APTRS can streamline your penetration testing workflows.</p> <p>\ud83c\udf28\ufe0f Huge thanks to DigitalOcean for their support of the APTRS project.</p> <p>Warning</p> <p>\ud83d\udea7 APIs related to user profiles and user management, such as adding, editing, deleting users, and changing passwords, are disabled on the cloud-hosted demo instance.</p>"},{"location":"getting-started/license/","title":"License","text":"<p>The APTRS project is released under the MIT License, which is a permissive open-source license allowing anyone to use, modify, and distribute the software freely. This license ensures that the software remains open and accessible while permitting both personal and commercial use, provided that the original copyright notice and license terms are included in all copies or substantial portions of the software</p>"},{"location":"installation/certificate/","title":"Secure Certificate","text":"<p>APTRS uses HTTPS with a self-signed certificate. If you would like to replace the self-signed certificate with your own, you can do so by updating the certificate and key files located at:</p> <p>https://github.com/APTRS/APTRS/tree/main/Certificate</p>"},{"location":"installation/docker/","title":"Docker","text":""},{"location":"installation/docker/#linux","title":"Linux","text":"Bash<pre><code>git clone https://github.com/APTRS/APTRS\ncd APTRS\ncp env.docker .env\nnano .env\ndocker-compose up \n</code></pre>"},{"location":"installation/docker/#windows","title":"Windows","text":"Bash<pre><code>git clone https://github.com/APTRS/APTRS\ncd APTRS\ncopy env.docker .env\nnotepad .env\ndocker-compose up \n</code></pre> <p>Note</p> <p>The .env file contains all the environment variables, such as passwords for JWT, Database credentials, Cloud S3 bucket details, etc. It\u2019s important to update the default passwords and details before deploying the application. For more information, refer to the Environment Variables section.</p>"},{"location":"installation/env/","title":"Environment Variables","text":"<p>The APTRS backend uses the <code>.env</code> file to store credentials such as S3 bucket information, database credentials, secret keys, whitelisted IPs/domains, and more.</p> <ul> <li>If you are deploying the application with Docker, make sure to update the details in the .env file from the project root.</li> <li>If you are deploying the application without Docker, you will need to update specific details like the S3 bucket and whitelisted IPs.</li> </ul> ENV Description Docker Linux Server Manual Setup <code>SECRET_KEY</code> This key is used by Backend including JWT, Should be secured and random. Manually need to be updated in env file Manually need to be updated in env file <code>WHITELIST_IP</code> This allows to set whitelisted IP/domain with port number to allow loading resource during PDF report to prevent SSRF vulnerability. Manually need to be updated in env file, make sure to keep the <code>https://nginx</code> as its required to connect with nginx within Docker Manually need to be updated in env file based on your domain name, IP etc. <code>ALLOWED_HOST</code> Whitelist allowed host to prevent host header injection attack Manually need to be updated in env file Manually need to be updated in env file based on your domain name, IP etc. <code>CORS_ORIGIN</code> Whitelist allowed origin to prevent cross origin attack Manually need to be updated in env file Manually need to be updated in env file based on your domain name, IP etc. <code>REDIS_URL</code> Redis Server Details including IP, Port and password Should replace the default password <code>q8N8HwlaOWqOl1hG7rdmBsm7oT52fLKHZXFwOB4VM7SXFDV8wg</code> to a new strong random password. Do not update other details except password Manually need to be updated in env file for REDIS password, IP and Port details <code>REDIS_PASSWORD</code> Redis Server password for Redis image in docker Should replace the default password <code>q8N8HwlaOWqOl1hG7rdmBsm7oT52fLKHZXFwOB4VM7SXFDV8wg</code> to a new strong random password. Password in REDIS_URL  and REDIS_PASSWORD should be same Not needed and no need to update/add. <code>POSTGRES_USER</code> , <code>POSTGRES_PASSWORD</code>, <code>POSTGRES_PORT</code>, <code>POSTGRES_DB</code> Postgres DB username, password, port, and DB names Manually need to be updated in env file Manually need to be updated in env file. <code>POSTGRES_HOST</code> Postgres host name Should not be updated. Manually need to be updated in env file. <code>USE_S3</code> If you want to use Cloud S3 bucket Digital Ocean or AWS s3 bucket. Default <code>False</code>, you can change it to <code>True</code> Optional Optional <code>AWS_ACCESS_KEY_ID</code> <code>AWS_SECRET_ACCESS_KEY</code> <code>AWS_STORAGE_BUCKET_NAME</code> <code>AWS_S3_REGION_NAME</code> <code>AWS_S3_CUSTOM_DOMAIN</code> <code>AWS_S3_ENDPOINT_URL</code> Bucket details if <code>USE_S3</code> is set to <code>True</code> Optional Optional <code>USE_DOCKER</code> Used by APTRS Django code to validate if application deployed on Docker or Not Optional, It is already declared as <code>True</code> in Docker file Required to set to <code>False</code> <code>USER_TIME_ZONE</code> Used by APTRS Django code and Background task schedule time using celery Required to set the local time zon or UTC Required to set the local time zon or UTC <ul> <li>List of Supported Time Zone</li> </ul>"},{"location":"installation/frontend/","title":"Frontend","text":"<p>APTRS now includes the source code of the Vite.js frontend by default, instead of a pre-built version. This change allows you greater flexibility to customize the frontend as needed. If you are deploying the application using Docker, the build process is handled automatically, so you don't need to worry about creating a production build manually.</p> <p>However, if you choose to manually deploy APTRS, you will need to manually build the production version of the frontend and serve it using Nginx or any other reverse proxy.</p> <p>To build the production version from the Vite.js source code, follow these steps:</p> Bash<pre><code>git clone https://github.com/APTRS/APTRS\ncd APTRS\ncd Frontend\ncp env.example .env\nnpm run build\n</code></pre> <p>Note</p> <p>The .env file contains settings like the backend API domain and app environment. You can modify these as needed.</p> <p>By default, APTRS serves both the backend and frontend on the same server, meaning they share the same IP/domain and port. The <code>.env</code> file uses just <code>/api/</code> in docker build for the backend API domain. This setup is recommended to avoid issues with image uploads in the CKEditor within APTRS and to prevent conflicts related to Same-Origin policies.</p>"},{"location":"installation/frontend/#hosting-the-frontend-and-api-together","title":"Hosting the Frontend and API Together","text":"<p>If you wish to host the frontend on a separate domain, IP, or port from the backend API, you can configure the backend API's domain in the .env file within the Frontend folder. For example:</p> Bash<pre><code>nano .env\n\nVITE_APP_API_URL = http://backend-api.com/api/\nnpm run build\n</code></pre> <p>However, it is not recommended to host the API and frontend on separate domains, IPs, or ports. Here's why:</p> <ol> <li> <p>JWT Token Authentication and Cookies:</p> <ul> <li>The API uses a combination of JWT tokens in headers and cookies for authentication and access control.</li> <li>Cookies are domain-specific and cannot be shared across different domains unless explicitly configured with a domain-wide scope. This can lead to complexities in maintaining secure cross-domain authentication.</li> </ul> </li> <li> <p>Static Image Loading Issues:</p> <ul> <li>Browsers do not allow custom headers, such as JWT tokens, for loading static resources like images.</li> <li>APTRS addresses this by using cookies for authentication, allowing images protected by the API to be loaded by authenticated users. However, this setup is difficult to manage across separate domains, as it relies on cookies being available in the same domain scope.</li> </ul> </li> <li> <p>Unified Image Path Management:</p> <ul> <li>APTRS supports storing images locally or on S3. Using the API for image access ensures consistency, as images are accessed through the same API endpoint regardless of their storage location.</li> <li>This approach prevents exposing hardcoded S3 bucket URLs in CKEditor or frontend code. Additionally, if the S3 bucket URL changes or signed URLs expire, the API path remains consistent.</li> </ul> </li> <li> <p>Image Management with CKEditor:</p> <ul> <li>APTRS manages images uploaded through CKEditor by serving them directly via the backend API, rather than using a web server. This design ensures that sensitive images, such as those used for proofs of concept (POCs), are accessible only to authenticated users. These images are protected by authentication tokens and are not publicly exposed.</li> <li> <p>CKEditor uses <code>&lt;img&gt;</code> tags with a <code>src</code> attribute pointing to the API's image path. For example:</p> HTML<pre><code>&lt;img src=\"https://api.yourdomain.com/api/path/to/image.jpg\" /&gt;\n</code></pre> </li> </ul> </li> </ol>"},{"location":"installation/frontend/#challenges-with-hosting-the-api-and-frontend-on-separate-domains","title":"Challenges with Hosting the API and Frontend on Separate Domains","text":"<p>When the API is hosted on a separate domain from the frontend:</p> <ul> <li>CKEditor hardcodes the API domain in the <code>src</code> attribute of the images.</li> <li>If the API domain name, IP, or port changes, previously uploaded images will fail to load, as CKEditor cannot dynamically update the <code>src</code> attribute.</li> <li>Additionally, browsers loading static resources like images do not support custom headers (e.g., JWT tokens), which can complicate access control for images requiring authentication.</li> </ul>"},{"location":"installation/frontend/#benefits-of-hosting-api-and-frontend-on-the-same-domain","title":"Benefits of Hosting API and Frontend on the Same Domain","text":"<p>If both the API and frontend are hosted on the same domain, the frontend can be built with <code>VITE_API_URL=/api/</code>. This approach allows CKEditor to generate image paths relative to the frontend's base domain, such as:</p> HTML<pre><code>     &lt;img src=\"/api/path/to/image.jpg\" /&gt;\n</code></pre> <p>This configuration provides several advantages:</p> <ul> <li>Domain Independence: The image path (<code>/api/path/to/image.jpg</code>) remains valid even if the domain name, IP address, or port changes, as long as the API and frontend share the same base domain.</li> <li>Simplified Image Access: The relative path ensures that images are seamlessly accessible without hardcoding the API domain, reducing the risk of broken links if deployment configurations change.</li> <li>Consistent User Experience: End users can load images securely without encountering authentication or cross-domain issues.</li> </ul>"},{"location":"installation/frontend/#recommendation","title":"Recommendation","text":"<p>For best results:</p> <ol> <li> <p>Host Both API and Frontend on the Same Domain</p> <ul> <li>Use a reverse proxy, such as Nginx, to host both the API and frontend on the same domain.</li> <li>Configure the frontend to use VITE_API_URL=/api/.</li> </ul> <p>This setup improves maintainability and ensures robustness against deployment changes, as the relative paths remain valid even if the domain name, IP, or port changes.</p> </li> <li> <p>Deploying Frontend and Backend on Separate Servers</p> <ul> <li> <p>If you require separate servers for the frontend and backend (e.g., for scalability, load balancing, or easier maintenance), you can still serve both on the same domain or IP and port for users by using a reverse proxy.</p> </li> <li> <p>For example, you can deploy the frontend on one server and the backend on another, but configure your reverse proxy to route requests based on the path:</p> <ul> <li>Requests to <code>/api/*, media/*, static/*</code> are proxied to the backend server.</li> <li>Other requests (e.g., for the frontend) are served by the frontend server.</li> </ul> </li> </ul> </li> </ol>"},{"location":"installation/install/","title":"Install","text":"<p>APTRS can be installed using two methods:</p> <ul> <li>Docker (Recommended for most users)</li> <li>Manual (User with Knowledge of Nginx and Little Python and Nodejs)</li> </ul> <p>Note</p> <p>APTRS does not natively support Windows installations and setting it up on Windows is not recommended. While it's possible to manually install certain components (such as the APTRS Backend, Frontend, and Database) on Windows, key dependencies like Redis require a Linux environment. Instead, you can use the Docker setup for Windows, which is the preferred option for Windows users.</p> <p>Note</p> <p>Default creds are sourav.kalal@aptrs.com &amp; I-am-Weak-Password-Please-Change-Me</p> <p>Note</p> <p>APTRS uses cookie attributes such as Secure, HttpOnly, and Lax. For users with a Docker setup, these attributes will not have any effect. However, users with a manual setup need to ensure that they use HTTPS and that both the front end and back end are on the same domain or IP address.</p>"},{"location":"installation/manual/","title":"Manual Installation","text":"<p>If you prefer to install the APTRS without Docker and have more control over each service, such as Redis, Postgresql, Nginx, etc., or if you want to host the database on a different server, Redis on a different server, etc., you can follow the below process for deploying the APTRS on a server without Docker. </p> <p>The steps mentioned below were tested on the below setup:</p> <ul> <li>OS - Ubuntu 24.10</li> <li>Python - 3.12.7 \u00a0(3.9+ is required)</li> <li>Python Poetry - 1.8.4</li> <li>PostgreSQL - 16.4 (Ubuntu 16.4-1build1)</li> <li>Redis Server - 7.0.15</li> <li>Nginx - 1.26.0</li> <li>NodeJS - 20.16.0 (18+ is required)</li> <li>NPM - 9.2.0</li> </ul> <p>Note</p> <p>While we have provided detailed steps for manual installation and deployment, please note that this method is more prone to errors. Variations in software versions, updates, system configurations, and other factors may result in unexpected issues. Manual installation is intended for individuals who have a solid understanding of Linux, some level of development experience, or expertise in application deployment, and are comfortable troubleshooting potential errors that may arise.</p>"},{"location":"installation/manual/#reference-links","title":"Reference Links","text":"<ul> <li>Digital Ocean - How To Set Up Django with Postgres, Nginx, and Gunicorn on Ubuntu</li> <li>Digital Ocean - How To Install Nginx on Ubuntu 20.04</li> <li>Digital Ocean - How To Secure Nginx with Let's Encrypt on Ubuntu 20.04</li> <li>Digital Ocean - How To Install and Secure Redis on Ubuntu 22.04</li> <li>Digital Ocean - How To Install and Use PostgreSQL on Ubuntu 20.04</li> </ul>"},{"location":"installation/manual/#postgresql-setup","title":"PostgreSQL Setup","text":"<p>Run the below command to install PostgreSQL.</p> Bash<pre><code>sudo apt-get install \u00a0postgresql postgresql-contrib\n</code></pre> <p>After the installation is complete, we can access the PostgreSQL shell using the command below.</p> Bash<pre><code>sudo -u postgres psql\n</code></pre> <p>From the PostgreSQL shell, create a new database for the APTRS project. Change the name to something relevant to the project.</p> Bash<pre><code>CREATE DATABASE aptrsdb;\n</code></pre> <p>Next, create a database user for our project. Make sure to select a secure password:</p> Bash<pre><code>CREATE USER aptrsdb_user WITH PASSWORD 's!!D%AriPB-MO~5';\n</code></pre> <p>We will set the default encoding to UTF-8 and adjust other settings. Please update the time zone according to your preference, and ensure we use the same time zone as the APTRS.</p> Bash<pre><code>ALTER ROLE aptrsdb_user SET client_encoding TO 'utf8';\nALTER ROLE aptrsdb_user SET default_transaction_isolation TO 'read committed';\nALTER ROLE aptrsdb_user SET timezone TO 'UTC';\n\n\\c aptrsdb;\nGRANT USAGE ON SCHEMA public TO aptrsdb_user;\nGRANT ALL PRIVILEGES ON SCHEMA public TO aptrsdb_user;\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO aptrsdb_user;\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO aptrsdb_user;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO aptrsdb_user;\nGRANT ALL PRIVILEGES ON DATABASE aptrsdb TO aptrsdb_user;\n\\q\n</code></pre> <p>After completing our tasks, we ensure that the PostgreSQL service is running and set to start automatically on reboot.</p> Bash<pre><code>sudo systemctl start postgresql\nsudo systemctl enable postgresql\n</code></pre>"},{"location":"installation/manual/#redis-setup","title":"Redis Setup","text":"<p>To install Redis, run the command below.</p> Bash<pre><code>sudo apt install redis-server\n</code></pre> <p>After installing Redis, we should ensure to change the <code>supervised</code> setting and add a password to our Redis service.</p> <p>Bash<pre><code>sudo nano /etc/redis/redis.conf\n</code></pre> \u00a0 In the <code>redis.conf</code> file, add the following content. Ensure to update the password to a new, secure password.</p> Bash<pre><code>supervised systemd\nrequirepass s!!D%AriPB-MO~5\n</code></pre> <p>After completing our tasks, we ensure that the Redis service is running and is set to start automatically on reboot.</p> Bash<pre><code>sudo systemctl restart redis\nsudo systemctl enable redis\nsudo systemctl restart redis.service\n</code></pre>"},{"location":"installation/manual/#aptrs-django-apis-setup","title":"APTRS Django APIs Setup","text":"<p>Run the below command to install Python and other requirements for the APTRS.</p> Bash<pre><code>sudo apt install python3-venv python3-dev libpq-dev weasyprint\n</code></pre> <p>It's better to separate the API and web service from other users on the machine. It's advisable to create a separate account for it.</p> Bash<pre><code>sudo adduser aptrs\nsudo usermod -aG sudo aptrs\nusermod -a -G www-data aptrs\nsudo su - aptrs\n</code></pre> <p>APTRS uses Python Poetry to manage dependencies, so we ensure its installation.</p> Bash<pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>By default, Poetry is not added to the user or system environment. Ensure you add it to the environment.</p> Bash<pre><code>export PATH=\"/home/aptrs/.local/bin:$PATH\"\n</code></pre> <p>Once completed, we can download the APTRS from GitHub, install the dependencies, and copy the example .env file.</p> <p>Bash<pre><code>cd /home/aptrs\ngit clone https://github.com/APTRS/APTRS\ncd APTRS\npoetry install\ncd APTRS\ncp env.example .env \u00a0# The .env file should be located in the same directory as the manage.py file.\n</code></pre> After obtaining the <code>.env</code> file from the demo environment file, ensure that you update it with the following details: the password for Redis, the PostgreSQL hostname or IP address, the Redis hostname or IP address, the secret key, and any other necessary information. It's important to review all the details in the <code>.env</code> file carefully. For more information on configuring the <code>.env</code> file and the various data it contains, please refer to the Environment Variables section.</p> <p>Few Important details for .env file:</p> <ul> <li> <p>WHITELIST_IP: Add the server domain name if you're using one; if using a public IP, include that as well. For local network access, add the server's internal IP to the whitelist. Specify the protocol (HTTP or HTTPS) and use Nginx instead of the Django default port (8000). You don\u2019t need to specify a port if using HTTP on 80 or HTTPS on 443. If using S3 buckets, include the bucket URL.</p> </li> <li> <p>CORS_ORIGIN: Since the frontend and backend will be on the same server, simply allow the server's public or local IP, along with the appropriate protocol and port, if necessary. Both frontend and backend should be accessible via the same domain or IP using Nginx reverse proxy. For more details, check the Frontend documentation.</p> </li> <li> <p>ALLOWED_HOST: Set this only for the server's domain name or public/internal IP, based on how APTRS will be accessed.</p> </li> <li> <p>SECRET_KEY: Make sure to update it with a secure key; the same key will be used to generate a JWT token.</p> </li> </ul> <p>From the directory where manage.py is located, run the command below.</p> Bash<pre><code>poetry shell\npython3 manage.py makemigrations accounts\npython3 manage.py makemigrations configapi\npython3 manage.py makemigrations customers\npython3 manage.py makemigrations project\npython3 manage.py makemigrations vulnerability\npython3 manage.py makemigrations\npython3 manage.py migrate\npython3 manage.py first_setup\nexit\n</code></pre> <p>Once we have completed the required setup, we need to start the server. APTRS uses Gunicorn for this purpose, which should already be installed through the steps we have completed so far. Since we are using Poetry, we need to locate the full path of Gunicorn for the APTRS project using the command below:</p> Bash<pre><code>$&gt; cd /home/aptrs/APTRS\n$&gt; poetry run which gunicorn\n\n##We might get the full path like below, this will be different for all users\n/home/aptrs/.cache/pypoetry/virtualenvs/aptrs-h1P6HTQN-py3.12/bin/gunicorn\n</code></pre> <p>Once we have the full path for gunicorn, we can set up the <code>gunicorn.service</code> with the command below:</p> Bash<pre><code>sudo nano /etc/systemd/system/gunicorn.service\n</code></pre> <p>In the nano file editor, paste the following text. Ensure to update the full path for gunicorn in the <code>gunicorn.service</code> file.</p> Bash<pre><code>[Unit]\nDescription=gunicorn daemon to serve APTRS\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=aptrs\nGroup=www-data\nWorkingDirectory=/home/aptrs/APTRS/APTRS\nExecStart=/home/aptrs/.cache/pypoetry/virtualenvs/aptrs-h1P6HTQN-py3.12/bin/gunicorn --workers 3 --access-logfile - --bind unix:/run/gunicorn.sock APTRS.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>We can now set up the <code>gunicorn.socket</code> using the command below:</p> Bash<pre><code>sudo nano /etc/systemd/system/gunicorn.socket\n</code></pre> Bash<pre><code>[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=/run/gunicorn.sock\n\n[Install]\nWantedBy=sockets.target\n</code></pre> <p>Now that everything is ready, we can start the Gunicorn service using the command below.</p> Bash<pre><code>sudo systemctl start gunicorn.socket\nsudo systemctl enable gunicorn.socket\nsudo systemctl enable gunicorn\nsudo systemctl daemon-reload\nsudo systemctl restart gunicorn\n</code></pre> <p>You can verify whether the APTRS APIs are operational by using the command below.</p> Bash<pre><code>curl --unix-socket /run/gunicorn.sock localhost/api/config/ping/\n\n{\"status\":\"ok\",\"message\":\"Server is up and running!\"}\n</code></pre> <p>In case of an error, you can check if the socket and service have any issues using the command below. Bash<pre><code>sudo systemctl status gunicorn.socket\nsudo systemctl status gunicorn\n</code></pre></p>"},{"location":"installation/manual/#frontend-vitejs-setup","title":"Frontend ViteJs Setup","text":"<p>To install Node.js, run the command below.</p> Bash<pre><code>sudo apt install nodejs\nsudo apt install npm\n</code></pre> <p>After installing NPM and Node.js, we need to create a <code>.env</code> file for the front end. This <code>.env</code> file will contain the URL for the backend Django API. Since we plan to deploy both the API and the frontend on the same server and they will be accessible through the same domain or IP address using Nginx, we will specify the backend URL as <code>/api/</code>. For more details, please refer to the Frontend documentation.</p> Bash<pre><code>cd /home/aptrs/APTRS/frontend\ncp env.example .env\nnano .env\n</code></pre> <p>In the Nano editor, modify the content to reflect the following changes:</p> Bash<pre><code>VITE_APP_API_URL = /api/\nVITE_APP_ENV = production\n</code></pre> <p>Now that we have configured the env file, we can install the required packages for the frontend with the command below:</p> Bash<pre><code>npm install\n</code></pre> <p>Once we have all the packages installed, we can build the frontend using the command below.</p> Bash<pre><code>npm run build\n</code></pre> <p>Once the build is completed, we can see all the front-end build at the directory below:</p> Bash<pre><code>cd /home/aptrs/APTRS/frontend/dist\nls \n\nandroid-chrome-192x192.png \u00a0assets \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 favicon.ico \u00a0 \u00a0 \u00a0 logo.svg \u00a0 \u00a0 \u00a0 stats.html\nandroid-chrome-512x512.png \u00a0favicon-16x16.png \u00a0hero-desktop.png \u00a0manifest.json\napple-touch-icon.png \u00a0 \u00a0 \u00a0 \u00a0favicon-32x32.png \u00a0index.html \u00a0 \u00a0 \u00a0 \u00a0robots.txt\n</code></pre>"},{"location":"installation/manual/#nginx-setup","title":"Nginx Setup","text":"<p>We have everything set up, and our APIs are running with Gunicorn. Now, we need to configure the frontend to serve static files with Nginx and connect Gunicorn to Nginx. To get started, we first need to install Nginx using the command below:</p> Bash<pre><code>sudo apt install nginx\n</code></pre> <p>Since our frontend and backend are in the user directory, we will encounter a permission error from Nginx. To resolve this, we will grant access to the www-data user group with the command below:</p> Bash<pre><code>sudo chown -R aptrs:www-data /home/aptrs\n</code></pre> <p>To complete the setup, we can assume the domain name for our web server is <code>demo.aptrs.com</code>. The configuration below will have the nginx configuration files or folder names based on the domain, which users should replace with their actual domain.</p> <p>Next, we will create a new server block in the Nginx sites-available directory using the following command:</p> Bash<pre><code>sudo nano /etc/nginx/sites-available/demo.aptrs.com\n</code></pre> <p>Paste the Below nginx configuration,</p> Bash<pre><code># HTTP server configuration\nserver {\n\u00a0 \u00a0 listen 80;\n\u00a0 \u00a0 server_name demo.aptrs.com; \u00a0# Replace with your domain\n\n\u00a0 \u00a0 server_tokens off;\n\u00a0 \u00a0 client_max_body_size 100M;\n\n\n\n\u00a0 \u00a0 ### Host Validation - &gt; Update according to your need\n\u00a0 \u00a0 if ( $host !~* ^(demo.aptrs.com)$ ) {\n\u00a0 \u00a0 \u00a0 \u00a0 return 444;\n }\n\n\u00a0 \u00a0 # Pass all /api/* to the Django backend \n\u00a0 \u00a0 location /api/ {\n\u00a0 \u00a0 \u00a0 \u00a0 proxy_pass http://unix:/run/gunicorn.sock;\n\u00a0 \u00a0 \u00a0 \u00a0 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\u00a0 \u00a0 \u00a0 \u00a0 proxy_set_header X-Forwarded-Proto $scheme;\n\u00a0 \u00a0 \u00a0 \u00a0 proxy_set_header Host $host;\n\u00a0 \u00a0 \u00a0 \u00a0 proxy_redirect off;\n }\n\n\u00a0 \u00a0 # Home page for frontend\n\u00a0 \u00a0 location / {\n\u00a0 \u00a0 root /home/aptrs/APTRS/frontend/dist;\n\u00a0 \u00a0 index index.html index.htm;\n\u00a0 \u00a0 try_files $uri $uri/ /index.html =404;\n }\n\u00a0 \u00a0 ## Server Static from Django over nginx\n\u00a0 \u00a0 location /static/ {\n\u00a0 \u00a0 \u00a0 \u00a0 alias /home/aptrs/APTRS/APTRS/static/; \n }\n\n\u00a0 \u00a0 # Blocked, accessing the whole media folder may lead to access to sensitive images like POC images, \n\u00a0 \u00a0 #location /media/ {\n\u00a0 \u00a0 # \u00a0 \u00a0alias /home/aptrs/APTRS/APTRS/media/; \u00a0# Path to your media files\n\u00a0 \u00a0 #} \n\n\u00a0 \u00a0 location = /favicon.ico { \n\u00a0 \u00a0 alias /home/aptrs/APTRS/frontend/dist/favicon.ico;\n\u00a0 \u00a0 access_log off; \n\u00a0 \u00a0 log_not_found off; \n\u00a0 \u00a0 \n }\n\n\u00a0 \u00a0 ## Server user profile photo\n\u00a0 \u00a0 location /media/profile/ {\n\u00a0 \u00a0 \u00a0 \u00a0 alias /home/aptrs/APTRS/APTRS/media/profile/; \u00a0# Path to your media files\n } \n\n\u00a0 \u00a0 ## Server Company Logo Images\n\u00a0 \u00a0 location /media/company/ {\n\u00a0 \u00a0 \u00a0 \u00a0 alias /home/aptrs/APTRS/APTRS/media/company/; \u00a0# Path to your media files\n }\n\n\u00a0 \u00a0 ## HTML Report design Images like background images\n\u00a0 \u00a0 location /media/report/ {\n\u00a0 \u00a0 \u00a0 \u00a0 alias /home/aptrs/APTRS/APTRS/media/report/; \u00a0# Path to your media files\n } \n\n\u00a0 \u00a0 access_log /var/log/nginx/APTRS_access.log; \u00a0# Path to access log file\n\u00a0 \u00a0 error_log /var/log/nginx/APTRS_error.log; \u00a0 # Path to the error log file\n}\n</code></pre> <p>Let\u2019s enable the file by creating a link from it to the\u00a0sites-enabled\u00a0directory, which Nginx reads from during startup:</p> Bash<pre><code>sudo ln -s /etc/nginx/sites-available/demo.aptrs.com /etc/nginx/sites-enabled/\n</code></pre> <p>Let's verify if any error from the nginx with</p> <p>Bash<pre><code>sudo nginx -t\n</code></pre> If there are no errors we can start the nginx</p> Bash<pre><code>sudo systemctl restart nginx\n</code></pre>"},{"location":"installation/manual/#https-certificate","title":"HTTPS Certificate","text":"<p>Once we have the domain name we can get the CA certificate with certbot using the below command. </p> Bash<pre><code>sudo apt install certbot python3-certbot-nginx\nsudo certbot --nginx -d demo.aptrs.com\nsudo systemctl status certbot.timer\nsudo certbot renew --dry-run\n</code></pre>"}]}